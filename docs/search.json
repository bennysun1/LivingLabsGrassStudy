[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applying the Histogram of Oriented Gradients Algorithm for Detecting Grass Lay Direction",
    "section": "",
    "text": "Subsistence-oriented indigenous communities across Alaska rely heavily on Traditional Ecological Knowledge (TEK), a holistic understanding of their environment acquired through generations of observation and cultural transmission. Among the Anishinaabek tradition, sweetgrass symbolizes wisdom and knowledge, passed down from elders to younger generations. Indigenous hunters and gatherers have long observed the alignment of grass and plants after the growing season as indicative of prevailing wind directions. Predominant wind direction serves a crucial role to subsistence practitioners when hunting, fishing, settling, and keeping track of changing weather. Due to the remote and harsh conditions, traditional weather stations are absent to measure shifts in historically predominant wind directions. On islands like St. Lawrence Island in Savoonga, AK, natives have observed a shift from historically predominant northerly wind patterns to southerly and easterly and dominated winds. In a previous study Dr. Jon Rosales (Environmental Studies) and his team collected images of grass lay from St. Lawrence University’s Living Laboratory and manually attempted to measure grass lay angles and relate them with wind data. This research project seeks to reinforce Traditional Ecological Knowledge (TEK) with Scientific Ecological Knowledge (SEK) to develop our understanding of Alaskan indigenous wisdom and its relation with modern scientific findings. We investigated the Histogram of Oriented Gradients (HOG) algorithm to automate the measurement of grass lay angles. We applied the algorithm to various images sampled from the internet and the Living Laboratory to test its viability."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "To evaluate the algorithm’s performance, we collected images with varying levels of complexity. Beginning with basic geometric shapes and diagonal lines sourced from Google Images, we established a foundational data set for initial testing. We incorporated aerial cityscapes including San Francisco, Salt Lake City, and Detroit from Mapbox, aiming to assess the algorithm’s ability in identifying urban grid structures such as streets and highways. Additionally, we included images of grass sourced from both Google Images and Dr. Jon Rosales (Environmental Studies) at St. Lawrence University’s Living Lab. The images sourced from Google Images were primarily The Living Lab images included aerial and close up shots, with special attention given to aerial images which featured a northern indicator line. To ensure consistent orientation, each aerial image was manually rotated to align north facing direction upwards before analysis, with the northern indicator subsequently removed to avoid introducing artificial lines in the image.\n\n\n\n\n\n\n\n(a) Diagnol Lines\n\n\n\n\n\n\n\n(b) Downtown San Francisco\n\n\n\n\n\n\n\n\n\n(c) Internet Grass\n\n\n\n\n\n\n\n(d) Aerial Living Labs\n\n\n\n\nFigure 2.1: Featured Images for Evaluation"
  },
  {
    "objectID": "methods.html",
    "href": "methods.html",
    "title": "3  Methods",
    "section": "",
    "text": "The HOG algorithm, introduced by Navneet Dalal and Bill Triggs in 2005, is a popular technique for object detection in images. The algorithm can identify gradient magnitudes and angles at each pixel in an image. The preliminary steps involved using the ‘skimage’ library from Python to preprocess the images of interest. This included loading, resizing, and converting the images to grayscale. Images were rescaled to standardize their resolutions and preserve their aspect ratios to prevent distortion that could affect the accuracy of angle identification. Converting the images to grayscale was necessary because it allowed for focusing on a single channel to represent pixel intensity, rather than three channels (red, green, and blue).\n\n\n\n\n\n\n\n\n\n(a) Internet Grass Image\n\n\n\n\nFigure 3.1: Rescaling and Converting Image to Greyscale\n\n\n\n\n\n\n      The HOG features were then computed for the resized images, which involved calculating the gradient magnitudes and angles at each pixel. The gradient magnitude at each pixel is comprised of the gradients in the ‘x’ and ‘y’ directions. The gradient in the x-direction is computed by subtracting the pixel value to the left of pixel of interest is subtracted from the pixel value to its right. Similarly, the gradient in the y-direction is calculated by pixel value below the pixel of interest is subtracted from the pixel value above the pixel of interest.\n\n\n\n\\(𝐺_𝑥=𝐼(𝑟,𝑐+1)−𝐼(𝑟,𝑐−1)\\)\n\\(𝐺_𝑦=𝐼(𝑟+1,𝑐)−𝐼(𝑟−1,𝑐)\\)\n\n\n      Now to calculate the gradient magnitude at the pixel of interest, the Pythagorean Theorem can be utilized where the gradient magnitude is equal to the square root of the x-gradient squared plus the y-gradient squared. The angle at a given pixel can be calculated by taking the inverse tangent of its y-gradient divided by its x-gradient. It is important to note all angles produced by this algorithm are between zero and one hundred eighty degrees. This occurs, because the inverse tangent function used for calculating a given pixel’s angle cannot distinguish between all four quadrants.\n\n\n\n\\(Magnitude(\\mu)=\\sqrt{G_{x}^{2} + G_{y}^{2}}\\)\n\\(Angle(𝜃)=𝑡𝑎𝑛^{−1} (\\frac{𝐺_𝑦}{𝐺_𝑥})\\)\n\n\n\n\n\n\n\n\n\n\n(a) Internet Grass Image\n\n\n\n\nFigure 3.2: Plotting Gradient Magnitudes\n\n\n\n\n\n\n\n\n      Next, histograms are constructed to visualize the distribution of gradient magnitudes and angles. Two different techniques for creating gradient angle histograms were implemented. The first histogram was created by counting the number of angles that fell into their respective bins. The second scheme factors in a pixel’s gradient magnitude and its allocation to its bordering bins. Here, the weight assigned to each bin is calculated by the angle’s deviation from the center of its central bin. This approach allows for a more representative histogram which splits angles between bins and takes their magnitudes into account. Lastly, these histograms are converted to polar histograms so the primary angles can be visualized and compared to their original images."
  },
  {
    "objectID": "results.html#load-r-packages",
    "href": "results.html#load-r-packages",
    "title": "4  Results",
    "section": "4.1 Load R Packages",
    "text": "4.1 Load R Packages\n\nlibrary(reticulate)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mapsapi)\nlibrary(mapboxapi)\n\nUsage of the Mapbox APIs is governed by the Mapbox Terms of Service.\nPlease visit https://www.mapbox.com/legal/tos/ for more information.\n\nlibrary(magick)\n\nLinking to ImageMagick 6.9.12.93\nEnabled features: cairo, fontconfig, freetype, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fftw, ghostscript, x11\n\nSys.which(\"python\")\n\n                                                   python \n\"/Users/bensunshine/.virtualenvs/r-reticulate/bin/python\""
  },
  {
    "objectID": "results.html#download-aerial-city-images",
    "href": "results.html#download-aerial-city-images",
    "title": "4  Results",
    "section": "4.2 Download Aerial City Images",
    "text": "4.2 Download Aerial City Images\n\nkey &lt;- Sys.getenv(\"mapbox_key\")\n\n\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 300,\n  height = 200, \n  image = T, latitude = 37.792004, longitude = -122.428079, zoom = 12\n)\n\nmagick::image_write(map, \"images/san_francisco_scale_zoom_12.png\")\n\n\npoints_of_interest &lt;- tibble::tibble(\n  longitude = c(-112.065945, -111.853948, \n                -111.852956, -112.023371),\n  \n  latitude = c(40.794275, 40.791516, \n               40.502308, 40.502308)\n  )\n\nprepped_pois &lt;- prep_overlay_markers(\n  data = points_of_interest,\n  marker_type = \"pin-l\",\n  label = 1:4,\n  color = \"#fff\", \n)\n\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 800,\n  height = 1200, \n  image = T, \n  latitude = 40.7,\n  longitude = -111.876183, zoom = 12\n)\n\nmagick::image_write(map, \"images/salt_lake_city_zoom_12.png\")\n\n\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 1200,\n  height = 800, \n  image = T, \n  latitude = 42.336322,\n  longitude = -83.048705, zoom = 12\n)\n\nmagick::image_write(map, \"images/detroit_zoom_12.png\")"
  },
  {
    "objectID": "results.html#load-python-libraries",
    "href": "results.html#load-python-libraries",
    "title": "4  Results",
    "section": "4.3 Load Python Libraries",
    "text": "4.3 Load Python Libraries\n\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# jupyter only inline output command\n#%matplotlib inline\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\n\n\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage import color\nfrom skimage.transform import resize\nimport math\nfrom skimage.feature import hog\nimport numpy as np"
  },
  {
    "objectID": "results.html#collect-hog-features",
    "href": "results.html#collect-hog-features",
    "title": "4  Results",
    "section": "4.4 Collect HOG Features",
    "text": "4.4 Collect HOG Features\n\nimg_list = []\nimg_list.append(color.rgb2gray(io.imread(\"images/diagnol_lines.jpg\")))\nimg_list.append(color.rgb2gray(io.imread(\"images/san_francisco_scale_zoom_12.png\")))\nimg_list.append(color.rgb2gray(io.imread(\"images/grass_image2.jpg\")))\nimg_list.append(color.rgb2gray(io.imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\")))\n\n#img = color.rgb2gray(io.imread(\"images/grass_image2.jpg\"))\n\n# img = color.rgb2gray(io.imread(\"images/b_test_image_copy.jpg\"))\n#img = color.rgb2gray(io.imread(\"images/long_grass_sample.jpeg\"))\n#img = color.rgb2gray(io.imread(\"images/diagnol_lines.jpg\"))\n\n#img = color.rgb2gray(io.imread(\"images/san_francisco_scale_zoom_12.png\"))\n\n#img = color.rgb2gray(io.imread(\"images/diagnol_lines_flipped.jpg\"))\n#img = color.rgb2gray(io.imread(\"images/long_grass_sample_cropped.jpg\"))\n\n# aerial rotated image\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\"))\n\n# zoomed internet photo\n#img = color.rgb2gray(io.imread(\"images/dead_grass_zoom.jpeg\"))\n\n\n# zoomed in 11\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_11.jpg\"))\n\n# zoomed in 12\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_12.jpg\"))\n\n# zoomed in 16\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_16_side.jpg\"))\n\n\n\n# real one\n#img = color.rgb2gray(io.imread(\"images/living_labs_real_grass_image.jpg\"))\n\nmag_list = []\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    img = img_list[x]\n    \n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n    \n    height = 200\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n    \n    resized_img = resize(img, (height, width))\n    img_list[x] = resized_img\n    \n    plt.figure(figsize=(15, 8))\n    plt.imshow(resized_img, cmap=\"gray\")\n    plt.axis(\"off\")\n    plt.show()\n    \n    mag = []\n    theta = []\n    \n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n        \n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - img[i][j - 1]\n            else:\n                Gx = img[i][j + 1] - img[i][j - 1]\n                \n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = img[i - 1][j] - 0\n            else:\n                Gy = img[i + 1][j] - img[i - 1][j]\n                \n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n            \n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n                    \n            angleArray.append(round(angle, 9))\n            \n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n        \n    mag_list.append(mag)\n    theta_list.append(theta)\n\nAspect Ratio: 1.0\nResized Width: 200\n&lt;Figure size 3000x1600 with 0 Axes&gt;\n&lt;matplotlib.image.AxesImage object at 0x2b5cb3250&gt;\n(-0.5, 199.5, 199.5, -0.5)\nAspect Ratio: 0.6666666666666666\nResized Width: 300\n&lt;Figure size 3000x1600 with 0 Axes&gt;\n&lt;matplotlib.image.AxesImage object at 0x2b6593850&gt;\n(-0.5, 299.5, 199.5, -0.5)\nAspect Ratio: 0.662751677852349\nResized Width: 301\n&lt;Figure size 3000x1600 with 0 Axes&gt;\n&lt;matplotlib.image.AxesImage object at 0x2ca56e910&gt;\n(-0.5, 300.5, 199.5, -0.5)\nAspect Ratio: 0.4904214559386973\nResized Width: 407\n&lt;Figure size 3000x1600 with 0 Axes&gt;\n&lt;matplotlib.image.AxesImage object at 0x2b5d7e810&gt;\n(-0.5, 406.5, 199.5, -0.5)"
  },
  {
    "objectID": "results.html#build-data-frames-for-each-image",
    "href": "results.html#build-data-frames-for-each-image",
    "title": "4  Results",
    "section": "4.5 Build Data Frames for Each Image",
    "text": "4.5 Build Data Frames for Each Image\n\nmag_diagonal = np.array(mag_list[0])\ntheta_diagonal = np.array(theta_list[0])\n\n\nmag_sf = np.array(mag_list[1])\ntheta_sf = np.array(theta_list[1])\n\n\nmag_internet_grass = np.array(mag_list[2])\ntheta_internet_grass = np.array(theta_list[2])\n\n\nmag_living_labs = np.array(mag_list[3])\ntheta_living_labs = np.array(theta_list[3])\n\n\n# Diagonal DF\ndiagonal_hog_df &lt;- data.frame(mag = as.vector(py$mag_diagonal),\n                              theta = as.vector((py$theta_diagonal))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# San Francisco DF\nsf_hog_df &lt;- data.frame(mag = as.vector(py$mag_sf),\n                              theta = as.vector((py$theta_sf))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# Internet Grass DF\ninternet_grass_hog_df &lt;- data.frame(mag = as.vector(py$mag_internet_grass),\n                              theta = as.vector((py$theta_internet_grass))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# Living Labs DF\nliving_labs_hog_df &lt;- data.frame(mag = as.vector(py$mag_living_labs),\n                              theta = as.vector((py$theta_living_labs))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# List of all Data frames\nstandard_df_list = list(diagonal_hog_df,\n                        sf_hog_df, \n                        internet_grass_hog_df, \n                        living_labs_hog_df)"
  },
  {
    "objectID": "results.html#plot-magnitudes-as-image",
    "href": "results.html#plot-magnitudes-as-image",
    "title": "4  Results",
    "section": "4.6 Plot Magnitudes as Image",
    "text": "4.6 Plot Magnitudes as Image\n\nplt.figure(figsize=(15, 8))\nplt.title('Gradient Magnitudes')\nplt.imshow(mag_list[0], cmap=\"gray\")\nplt.axis(\"off\")\n\n(-0.5, 199.5, 199.5, -0.5)\n\nplt.show()\n\n\n\n\nplt.savefig(\"mag.png\", dpi=300)"
  },
  {
    "objectID": "results.html#create-histogram-plots-of-gradient-magnitudes-and-angles",
    "href": "results.html#create-histogram-plots-of-gradient-magnitudes-and-angles",
    "title": "4  Results",
    "section": "4.7 Create Histogram Plots of Gradient Magnitudes and Angles",
    "text": "4.7 Create Histogram Plots of Gradient Magnitudes and Angles\n\ndiagonal_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[1]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Diagonal Line Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\ndiagonal_histogram_mag_plot\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\ndiagonal_mag_filter &lt;- 0.1\n\nggsave(\"images/plots/diagonal_histogram_mag_plot.jpg\", diagonal_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\ndiagonal_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Diagonal Line Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\ndiagonal_histogram_theta_plot\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nggsave(\"images/plots/diagonal_histogram_theta_plot.jpg\", diagonal_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\nsf_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[2]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"San Francisco Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nsf_histogram_mag_plot\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nsf_mag_filter &lt;- 0.4\n\nggsave(\"images/plots/sf_histogram_mag_plot.jpg\", sf_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\nsf_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"San Francisco Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nsf_histogram_theta_plot\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nggsave(\"images/plots/sf_histogram_theta_plot.jpg\", sf_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\ninternet_grass_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[3]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Internet Grass Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\ninternet_grass_histogram_mag_plot\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\ninternet_grass_mag_filter &lt;- 0.3\n\nggsave(\"images/plots/internet_grass_histogram_mag_plot.jpg\", internet_grass_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\ninternet_grass_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Internet Grass Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\ninternet_grass_histogram_theta_plot\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nggsave(\"images/plots/internet_grass_histogram_theta_plot.jpg\", internet_grass_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\nliving_labs_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[4]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Living Labs Grass Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nliving_labs_histogram_mag_plot\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nliving_labs__mag_filter &lt;- 0.15\n\nggsave(\"images/plots/living_labs_histogram_mag_plot.jpg\", living_labs_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\nliving_labs_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[4]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Living Labs Grass Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\nliving_labs_histogram_theta_plot\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nggsave(\"images/plots/living_labs_histogram_theta_plot.jpg\", living_labs_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "results.html#build-new-contribution-histograms-for-each-data-frame",
    "href": "results.html#build-new-contribution-histograms-for-each-data-frame",
    "title": "4  Results",
    "section": "4.8 Build New Contribution Histograms for Each Data Frame",
    "text": "4.8 Build New Contribution Histograms for Each Data Frame\n\n# Define the number of bins\nnum_bins &lt;- 9\n\n# function to calculate the contributions to neighboring bins\ncalculate_bin_contributions &lt;- function(angle, magnitude, num_bins) {\n  bin_width &lt;- 180 / num_bins\n  contributions &lt;- numeric(num_bins)\n  \n  # get the central bin\n  central_bin &lt;- floor(angle / bin_width) %% num_bins\n  next_bin &lt;- (central_bin + 1) %% num_bins\n  \n  # get contributions to neighboring bins\n  weight &lt;- (1 - abs((angle %% bin_width) / bin_width)) * magnitude\n  \n  contributions[central_bin + 1] &lt;- weight\n  contributions[next_bin + 1] &lt;- magnitude - weight\n  \n  return(list(contributions[1],\n         contributions[2],\n         contributions[3],\n         contributions[4],\n         contributions[5],\n         contributions[6],\n         contributions[7],\n         contributions[8],\n         contributions[9])\n         )\n}\n\nfiltered_standard_df_list &lt;-list(diagonal_hog_df %&gt;%\n                                   filter(mag &gt;= diagonal_mag_filter),\n                                 sf_hog_df %&gt;%\n                                   filter(mag &gt;= sf_mag_filter), \n                                 internet_grass_hog_df %&gt;%\n                                   filter(mag &gt;= internet_grass_mag_filter), \n                                 living_labs_hog_df %&gt;%\n                                   filter(mag &gt;= living_labs__mag_filter))\ncontribution_df_list &lt;- list()\n\n \nfor (i in 1:length(filtered_standard_df_list)){\n  \n  contribution_hog_df &lt;- \n    filtered_standard_df_list[[i]] %&gt;%\n    filter(mag &gt; 0.1) %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n  split_histo_df &lt;- \n    contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\", \n                 values_to = \"contribution\", \n                 cols = 4:ncol(contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n  \n  \n  contribution_df_list[[i]] &lt;- split_histo_df\n\n}"
  },
  {
    "objectID": "results.html#generate-polar-plots-for-standard-historgrams",
    "href": "results.html#generate-polar-plots-for-standard-historgrams",
    "title": "4  Results",
    "section": "4.9 Generate Polar Plots for Standard Historgrams",
    "text": "4.9 Generate Polar Plots for Standard Historgrams\n\ndiagonal_plot &lt;-\n  ggplot(filtered_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Diagonal Line Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n#diagonal_plot\n\n\nsf_plot &lt;-\n  ggplot(filtered_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of San Francisco Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n#sf_plot\n\n\ninternet_grass_plot &lt;-\n  ggplot(filtered_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Internet Grass Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n#internet_grass_plot\n\n\nliving_labs_plot &lt;-\n  ggplot(filtered_standard_df_list[[4]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Living Labs Grass Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n#living_labs_plot\n\n\nall_standard_plots &lt;- ggpubr::ggarrange(diagonal_plot, \n                                        sf_plot, \n                                        internet_grass_plot, \n                                        living_labs_plot)\n\nggsave(\"images/plots/all_standard_polar_plots.jpg\", \n       all_standard_plots, width = 7, \n       height = 7)\n\nall_standard_plots"
  },
  {
    "objectID": "results.html#generate-polar-plots-for-contribution-historgrams",
    "href": "results.html#generate-polar-plots-for-contribution-historgrams",
    "title": "4  Results",
    "section": "4.10 Generate Polar Plots for Contribution Historgrams",
    "text": "4.10 Generate Polar Plots for Contribution Historgrams\n\ndiagonal_split_plot &lt;-\n  ggplot(contribution_df_list[[1]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Diagonal Line Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nWarning in geom_histogram(stat = \"identity\", colour = \"black\", fill =\n\"lightblue\", : Ignoring unknown parameters: `binwidth`, `bins`, `pad`, and\n`breaks`\n\n#diagonal_split_plot\n\n\nsf_split_plot &lt;-\n  ggplot(contribution_df_list[[2]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of San Francisco Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nWarning in geom_histogram(stat = \"identity\", colour = \"black\", fill =\n\"lightblue\", : Ignoring unknown parameters: `binwidth`, `bins`, `pad`, and\n`breaks`\n\n#sf_split_plot\n\n\ninternet_grass_split_plot &lt;-\n  ggplot(contribution_df_list[[3]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Internet Grass Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nWarning in geom_histogram(stat = \"identity\", colour = \"black\", fill =\n\"lightblue\", : Ignoring unknown parameters: `binwidth`, `bins`, `pad`, and\n`breaks`\n\n#internet_grass_split_plot\n\n\nliving_labs_split_plot &lt;-\n  ggplot(contribution_df_list[[4]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Living Labs Aerial Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nWarning in geom_histogram(stat = \"identity\", colour = \"black\", fill =\n\"lightblue\", : Ignoring unknown parameters: `binwidth`, `bins`, `pad`, and\n`breaks`\n\n#living_labs_split_plot\n\n\nall_contribution_plots &lt;- ggpubr::ggarrange(diagonal_split_plot, \n                                            sf_split_plot, \n                                            internet_grass_split_plot, \n                                            living_labs_split_plot)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_bar()`).\nRemoved 1 row containing missing values or values outside the scale range\n(`geom_bar()`).\n\nggsave(\"images/plots/all_contribution_polar_plots.jpg\", \n       all_contribution_plots, width = 7, \n       height = 7)\n\nall_contribution_plots\n\n\n\n\n\nnumber_of_bins = 9\nstep_size = 180 / number_of_bins\n\n\n#Function to calculate the value of centre of jth bin\ndef calculate_j(angle):\n  temp = (angle / step_size) - 0.5\n  j = math.floor(temp)\n  return j\n\n\n# Function to calculate the value of jth bin\ndef calculate_Cj(j):\n  Cj = step_size * (j + 0.5)\n  return round(Cj, 9)\n\n\n# \ndef calculate_value_j(magnitude, angle, j):\n  Cj = calculate_Cj(j+1)\n  Vj = magnitude * ((Cj - angle) / step_size)\n  return round(Vj, 9)\n\n\nhistogram_points_nine = []\nhigh_val = 10\n# for i in range(0, height, high_val):\n#   temp = []\n#   for j in range(0, width, high_val):\n#     magnitude_values = [[mag[i][x] for x in range(j, j+high_val)] for i in range(i,i+high_val)]\n#     angle_values = [[theta[i][x] for x in range(j, j+high_val)] for i in range(i, i+high_val)]\n#     for k in range(len(magnitude_values)):\n#       for l in range(len(magnitude_values[0])):\n#         bins = [0.0 for _ in range(number_of_bins)]\n#         value_j = calculate_j(angle_values[k][l])\n#         Vj = calculate_value_j(magnitude_values[k][l], angle_values[k][l], value_j)\n#         Vj_1 = magnitude_values[k][l] - Vj\n#         bins[value_j]+=Vj\n#         bins[value_j+1]+=Vj_1\n#         bins = [round(x, 9) for x in bins]\n#     temp.append(bins)\n#   histogram_points_nine.append(temp)\n# \n# print(len(histogram_points_nine))\n# print(len(histogram_points_nine[0]))\n# print(len(histogram_points_nine[0][0]))\n\n\nepsilon = 1e-05\n\n# feature_vectors = []\n# for i in range(0, len(histogram_points_nine) - 1, 1):\n#   temp = []\n#   for j in range(0, len(histogram_points_nine[0]) - 1, 1):\n#     values = [[histogram_points_nine[i][x] for x in range(j, j+2)] for i in range(i, i+2)]\n#     final_vector = []\n#     for k in values:\n#       for l in k:\n#         for m in l:\n#           final_vector.append(m)\n#     k = round(math.sqrt(sum([pow(x, 2) for x in final_vector])), 9)\n#     final_vector = [round(x/(k + epsilon), 9) for x in final_vector]\n#     temp.append(final_vector)\n#   feature_vectors.append(temp)\n#   \n# print(len(feature_vectors))\n# print(len(feature_vectors[0]))\n# print(len(feature_vectors[0][0]))"
  },
  {
    "objectID": "results.html#generate-hog-image",
    "href": "results.html#generate-hog-image",
    "title": "4  Results",
    "section": "4.11 Generate HOG Image",
    "text": "4.11 Generate HOG Image\n\nimg = imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\")\nimg = color.rgb2gray(io.imread(\"images/grass_image2.jpg\"))\n\naspect_ratio = img.shape[0]/img.shape[1]\n\nheight = 200\nwidth = int(height/aspect_ratio)\n\n# height = 128\n# width = 192\n\n# make sure the resized is in sample ball park as the original aspect ratio, \n# that way the angles don't get squished\nresized_ratio = height/width\n\n\nresized_img = resize(img, (height, width))\n\nplt.axis(\"off\")\n\n(0.0, 1.0, 0.0, 1.0)\n\nplt.imshow(resized_img)\nprint(resized_img.shape)\n\n(200, 301)\n\nfd, hog_image = hog(resized_img, orientations=9, pixels_per_cell=(8, 8),\n                    cells_per_block=(2, 2), visualize=True#, channel_axis = 2 \n                    #multichannel=True\n                    )\nplt.axis(\"off\")\n\n(-0.5, 300.5, 199.5, -0.5)\n\nplt.imshow(hog_image, cmap=\"gray\")\nplt.show()\n\n\n\nplt.savefig('images/plots/grass2_image_hog.jpg')\n\n\n\n\n\n# grass2_polar_plot &lt;-\n# ggplot(diagonal_hog_df, #%&gt;% filter(mag &gt;= 0.1), \n#        aes(x = radian)) +\n#   geom_histogram(colour = \"black\", fill = \"lightblue\", \n#                  breaks = seq(0, 2*pi, length.out = 17.5),\n#                  bins = 9) +\n#   coord_polar(\n#     theta = \"x\", start = 0, direction = 1) +\n#   scale_x_continuous(\n#     breaks = c(0, pi/4, pi/2, 3*pi/4, pi, 5*pi/4, 3*pi/2, 7*pi/4), \n#     labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n#   )+\n#   labs(title = \"Polar Plot of Internet Grass Image\") +\n#     theme_minimal() +\n#   labs(x = \"\") +\n#   theme(axis.title.y = element_blank(),\n#         plot.title = element_text(hjust = 0.5))\n# \n# grass2_polar_plot\n\n#ggsave(\"_polar_plot.jpg\", polar_plot, width = 6, height = 4, dpi = 300)\n\n#all_plots &lt;- ggpubr::ggarrange(diaganol_polar_plot, sf_polar_plot, grass2_polar_plot, aerial_ll_polar_plot)\n\n#ggsave(\"images/plots/results_all_plots.jpg\", all_plots, width = 7, height = 7)"
  },
  {
    "objectID": "results.html#hog-image-of-internet-grass",
    "href": "results.html#hog-image-of-internet-grass",
    "title": "4  Results",
    "section": "4.12 HOG Image of Internet Grass",
    "text": "4.12 HOG Image of Internet Grass\n\nfrom skimage import color, io, exposure\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nfrom skimage.feature import hog\n\n# Load the image and preprocess it\nimg = color.rgb2gray(io.imread(\"images/grass_image2.jpg\"))\n# img = color.rgb2gray(io.imread(\"diagnol_lines_flipped.jpg\"))\n\naspect_ratio = img.shape[0] / img.shape[1]\nheight = 200\nwidth = int(height / aspect_ratio)\nresized_img = resize(img, (height, width))\n\nplt.figure(figsize=(8, 20))  # Adjusted the figure size to accommodate the additional object\nplt.imshow(resized_img, cmap=\"gray\")\nplt.axis(\"off\")\n\n(-0.5, 300.5, 199.5, -0.5)\n\nplt.show()\n\n\n\n# Compute HOG features\nhog_features, hog_image = hog(resized_img, orientations=9, pixels_per_cell=(8,8),\n                              cells_per_block=(10, 10), visualize=True)\n\n# Plot the images\nfig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(8, 20), sharex=True, sharey=True)  # Changed 1, 2 to 3, 1\n\n# Plot the rescaled black and white image\nax1.imshow(resized_img, cmap=plt.cm.gray)\nax1.set_title('Rescaled Black and White Image')\n\n# Plot the mag object\nax2.imshow(mag, cmap=plt.cm.gray)  # Assuming mag is the object you want to insert\n#ax2.axis(\"off\")\nax2.set_title('Pixel Magnitudes')\n\n# rescale HOG for better viewing:\nhog_color_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 10))\n\n# Plot the histogram of oriented gradients\nax3.imshow(hog_color_rescaled, cmap=plt.cm.gray)\nax3.set_title('Histogram of Oriented Gradients (HOG)')\n\nplt.savefig(\"images/plots/rescaled_grass2_image_hog.png\", dpi=300)\n\nplt.show()\n\n\n\n\n\nfrom skimage import color, io, exposure\nfrom skimage.transform import resize\nimport matplotlib.pyplot as plt\nfrom skimage.feature import hog\n\n# Load the image and preprocess it\nimg = io.imread(\"images/grass_image2.jpg\")\n# img = color.rgb2gray(io.imread(\"diagnol_lines_flipped.jpg\"))\n\naspect_ratio = img.shape[0] / img.shape[1]\nheight = 200\nwidth = int(height / aspect_ratio)\nresized_img = resize(img, (height, width))\n\nbw_resized_image = color.rgb2gray(resized_img)\n\nplt.figure(figsize=(15, 5))  # Adjusted the figure size to accommodate the additional object\nplt.imshow(resized_img, cmap=\"gray\")\nplt.axis(\"off\")\n\n(-0.5, 300.5, 199.5, -0.5)\n\nplt.show()\n\n\n\n# Compute HOG features\nhog_features, hog_image = hog(bw_resized_image, orientations=9, pixels_per_cell=(8,8),\n                              cells_per_block=(10, 10), visualize=True)\n\n# Plot the images\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(25, 5), sharex=True, sharey=True)  # Changed 3, 1 to 1, 5\n\n# Plot the rescaled input image\nax1.imshow(resized_img, cmap=plt.cm.gray)\nax1.set_title('Rescaled Input Image')\n\n# Plot the pixel magnitudes\nax2.imshow(mag, cmap=plt.cm.gray)  # Assuming mag is the object you want to insert\nax2.set_title('Pixel Magnitudes')\n\n# Plot the histogram of oriented gradients\nhog_color_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 10))\nax3.imshow(hog_color_rescaled, cmap=plt.cm.gray)\nax3.set_title('Histogram of Oriented Gradients (HOG) Image')\n\n# Plot the histogram of oriented gradients\n# angle_hist = io.imread(\"images/grass2_angles_histogram.jpg\")\n# resized_hist = resize(angle_hist, (height, width))\n# ax4.imshow(resized_hist, cmap=plt.cm.gray)\n# ax4.set_title('Angle Histogram')\n# \n# # Plot the polar plot\n# polar_plot = io.imread(\"images/grass2_polar_plot.jpg\")\n# resized_polar = resize(polar_plot, (height, width))\n# ax5.imshow(resized_polar, cmap=plt.cm.gray)\n# ax5.set_title('Polar Plot')\n\nplt.savefig(\"images/plots/rescaled_grass2_image_hog.png\", dpi=300)\n\nplt.show()"
  },
  {
    "objectID": "results.html#titus-flip",
    "href": "results.html#titus-flip",
    "title": "4  Results",
    "section": "4.13 Titus Flip",
    "text": "4.13 Titus Flip\n\nimage = imread('images/TitusFlip.jpg')\nimshow(image)\nprint(image.shape)\n\n(1350, 1080, 3)\n\nresized_image = resize(image, (300, 400))\n#resized_image = image\nimshow(resized_image)\nprint(resized_image.shape)\n\n(300, 400, 3)\n\nfig, hog_image = hog(resized_image, orientations=9, pixels_per_cell=(3, 3),\n                     cells_per_block=(15, 15), visualize=True, channel_axis=2 #multichannel=True\n                     )\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 7), sharex=True, sharey=True)\n\nax1.imshow(resized_image, cmap=plt.cm.gray)\nax1.set_title('Input image')\n\n# Rescale histogram for better display \nhog_color_rescaled = exposure.rescale_intensity(hog_image, in_range=(0, 10))\n\nax2.imshow(hog_color_rescaled, cmap=plt.cm.gray)\nax2.set_title('Histogram of Oriented Gradients (HOG)')\n\n# store to file\nplt.savefig(\"images/plots/titus_flip_example_hog.png\", dpi=300)\n\nplt.show()\n\n\n\n\n\n\n\n\n# hog_df &lt;- py$hog_df\n\n\n# ggplot(hog_df %&gt;% filter(mag &gt;= 0.4), \n#        aes(x = radian)) +\n#   geom_histogram(#binwidth = 5#, boundary = 0, closed = \"right\") +\n#   )+\n#   #scale_x_continuous(limits = c(0, 360), breaks = seq(0, 360, by = 45)) +\n#   #coord_polar(start = 0, direction = 1, ) +\n#   coord_radial(start = 0, end = pi, expand = F, clip = \"on\") +\n#   scale_x_continuous(\n#     breaks = c(0, pi/4, pi/2, 3*pi/4), \n#     labels = c(\"0\", \"π/4\", \"π/2\", \"3π/4\")\n#   ) +\n#   theme(plot.title = element_text(hjust = 0.5)) +\n#   labs(title = \"Polar Histogram of Theta\",\n#        x = \"Theta (Degrees)\",\n#        y = \"Frequency\") #+ theme_minimal()"
  }
]