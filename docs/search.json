[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applying the Histogram of Oriented Gradients Algorithm for Detecting Grass Lay Direction",
    "section": "",
    "text": "Subsistence-oriented indigenous communities across Alaska rely heavily on Traditional Ecological Knowledge (TEK), a holistic understanding of their environment acquired through generations of observation and cultural transmission. Among the Anishinaabek tradition, sweetgrass symbolizes wisdom and knowledge, passed down from elders to younger generations. Indigenous hunters and gatherers have long observed the alignment of grass and plants after the growing season as indicative of prevailing wind directions. Predominant wind direction serves a crucial role to subsistence practitioners when hunting, fishing, settling, and keeping track of changing weather. Due to the remote and harsh conditions, traditional weather stations are absent to measure shifts in historically predominant wind directions. On islands like St. Lawrence Island in Savoonga, AK, natives have observed a shift from historically predominant northerly wind patterns to southerly and easterly and dominated winds. In a previous study Dr. Jon Rosales (Environmental Studies) and his team collected images of grass lay from St. Lawrence University’s Living Laboratory and manually attempted to measure grass lay angles and relate them with wind data. This research project seeks to reinforce Traditional Ecological Knowledge (TEK) with Scientific Ecological Knowledge (SEK) to develop our understanding of Alaskan indigenous wisdom and its relation with modern scientific findings. We investigated the Histogram of Oriented Gradients (HOG) algorithm to automate the measurement of grass lay angles. We applied the algorithm to various images sampled from the internet and the Living Laboratory to test its viability.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Abstract</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "To evaluate the algorithm’s performance, we collected images with varying levels of complexity. Beginning with basic geometric shapes and diagonal lines sourced from Google Images, we established a foundational data set for initial testing. We incorporated aerial cityscapes including San Francisco, Salt Lake City, and Detroit from Mapbox, aiming to assess the algorithm’s ability in identifying urban grid structures such as streets and highways. Additionally, we included images of grass sourced from both Google Images and Dr. Jon Rosales (Environmental Studies) at St. Lawrence University’s Living Lab. The images sourced from Google Images were primarily The Living Lab images included aerial and close up shots, with special attention given to aerial images which featured a northern indicator line. To ensure consistent orientation, each aerial image was manually rotated to align north facing direction upwards before analysis, with the northern indicator subsequently removed to avoid introducing artificial lines in the image.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Diagnol Lines\n\n\n\n\n\n\n\n\n\n\n\n(b) Downtown San Francisco, CA\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Internet Grass\n\n\n\n\n\n\n\n\n\n\n\n(d) Aerial Living Laboratory\n\n\n\n\n\n\n\nFigure 2.1: Featured Images for Evaluation\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.1 (a): Diagnol Lines\nFigure 2.1 (b): Downtown San Francisco, CA\nFigure 2.1 (c): Internet Grass\nFigure 2.1 (d): Aerial Living Laboratory",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "methods.html",
    "href": "methods.html",
    "title": "3  Methods",
    "section": "",
    "text": "The HOG algorithm, introduced by Navneet Dalal and Bill Triggs in 2005, is a popular technique for object detection in images. The algorithm can identify gradient magnitudes and angles at each pixel in an image. The preliminary steps involved using the ‘skimage’ library from Python to preprocess the images of interest. This included loading, resizing, and converting the images to grayscale. Images were rescaled to standardize their resolutions and preserve their aspect ratios to prevent distortion that could affect the accuracy of angle identification. Converting the images to grayscale was necessary because it allowed for focusing on a single channel to represent pixel intensity, rather than three channels (red, green, and blue).\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Colored Image with Diagonal Line\n\n\n\n\n\n\n\nFigure 3.1: Rescaling and Converting Image to Greyscale\n\n\n\n\n\n\n\n      The HOG features were then computed for the resized images, which involved calculating the gradient magnitudes and angles at each pixel. The gradient magnitude at each pixel is comprised of the gradients in the ‘x’ and ‘y’ directions. The gradient in the x-direction is computed by subtracting the pixel value to the left of pixel of interest is subtracted from the pixel value to its right. Similarly, the gradient in the y-direction is calculated by pixel value below the pixel of interest is subtracted from the pixel value above the pixel of interest.\n\n\n\n\\(G_x=I(r,c+1)−I(r,c-1)\\)\n\\(G_y=I(r+1,c)−I(r-1,c)\\)\n\n\n      Now to calculate the gradient magnitude at the pixel of interest, the Pythagorean Theorem can be utilized where the gradient magnitude is equal to the square root of the x-gradient squared plus the y-gradient squared. The angle at a given pixel can be calculated by taking the inverse tangent of its y-gradient divided by its x-gradient. It is important to note all angles produced by this algorithm are between zero and one hundred eighty degrees. This occurs, because the inverse tangent function used for calculating a given pixel’s angle cannot distinguish between all four quadrants.\n\n\n\n\\(Magnitude(\\mu)=\\sqrt{G_{x}^{2} + G_{y}^{2}}\\)\n\\(Angle(\\Theta)=tan^{−1} (\\frac{G_y}{G_x})\\)\n\n\n\n\n\n\n\n\n\n\n\n(a) Diagonal Lines Image\n\n\n\n\n\n\n\nFigure 3.2: Plotting Gradient Magnitudes as Image\n\n\n\n\n\n\n\n\n\n      Next, histograms are constructed to visualize the distribution of gradient magnitudes and angles. Two different techniques for creating gradient angle histograms were implemented. The first histogram was created by counting the number of angles that fell into their respective bins. The second scheme factors in a pixel’s gradient magnitude and its allocation to its bordering bins. Here, the weight assigned to each bin is calculated by the angle’s deviation from the center of its central bin. This approach allows for a more representative histogram which splits angles between bins and takes their magnitudes into account. Lastly, these histograms are converted to polar histograms so the primary angles can be visualized and compared to their original images.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.3: Plotting Histograms of Gradients\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.1 (a): Colored Image with Diagonal Line\nFigure 3.2 (a): Diagonal Lines Image\nFigure 3.3: Plotting Histograms of Gradients",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Methods</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "4  Results",
    "section": "",
    "text": "4.1 Load R Packages\nCode\nlibrary(reticulate)\nlibrary(tidyverse)\nlibrary(mapsapi)\nlibrary(mapboxapi)\nlibrary(magick)\nSys.which(\"python\")\n\n\n                                                   python \n\"/Users/bensunshine/.virtualenvs/r-reticulate/bin/python\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#download-aerial-city-images",
    "href": "results.html#download-aerial-city-images",
    "title": "4  Results",
    "section": "4.2 Download Aerial City Images",
    "text": "4.2 Download Aerial City Images\n\n\nCode\n1key &lt;- Sys.getenv(\"mapbox_key\")\n\n\n\n1\n\nRead in Mapbox Key from System Environment\n\n\n\n\n\n\nCode\n2map &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 300,\n  height = 200, \n  image = T, latitude = 37.792004, longitude = -122.428079, zoom = 12\n)\n\nmagick::image_write(map, \"images/san_francisco_scale_zoom_12.png\")\n\n\n\n2\n\nUsing Mapbox API Download Image of downtown San Francisco, CA\n\n\n\n\n\n\nCode\n3points_of_interest &lt;- tibble::tibble(\n  longitude = c(-112.065945, -111.853948, \n                -111.852956, -112.023371),\n  \n  latitude = c(40.794275, 40.791516, \n               40.502308, 40.502308)\n  )\n\nprepped_pois &lt;- prep_overlay_markers(\n  data = points_of_interest,\n  marker_type = \"pin-l\",\n  label = 1:4,\n  color = \"#fff\", \n)\n\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 800,\n  height = 1200, \n  image = T, \n  latitude = 40.7,\n  longitude = -111.876183, zoom = 12\n)\n\nmagick::image_write(map, \"images/salt_lake_city_zoom_12.png\")\n\n\n\n3\n\nUsing Mapbox API Download Image of downtown Salt Lake City, UT\n\n\n\n\n\n\nCode\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 1200,\n  height = 800, \n  image = T, \n  latitude = 42.336322,\n  longitude = -83.048705, zoom = 12\n)\n\nmagick::image_write(map, \"images/detroit_zoom_12.png\")\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco Cityscape\n\n\n\n\n\n\n\nSalt Lake City Cityscape\n\n\n\n\n\n\n\nDetroit Cityscape\n\n\n\n\n\n\nFigure 4.1: Aerial Cityscape Images",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#load-python-libraries",
    "href": "results.html#load-python-libraries",
    "title": "4  Results",
    "section": "4.3 Load Python Libraries",
    "text": "4.3 Load Python Libraries\n\n\nCode\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# jupyter only inline output command\n#%matplotlib inline\n\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\n\n\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage import color\nfrom skimage.transform import resize\nimport math\nfrom skimage.feature import hog\nimport numpy as np",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#collect-hog-features-for-aerial-cityscapes",
    "href": "results.html#collect-hog-features-for-aerial-cityscapes",
    "title": "4  Results",
    "section": "4.4 Collect HOG Features for Aerial Cityscapes",
    "text": "4.4 Collect HOG Features for Aerial Cityscapes\n\n\nCode\n# List for storing images\nimg_list = []\n\n# SF aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/san_francisco_scale_zoom_12.png\")))\n\n# Salt Lake City Aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/salt_lake_city_zoom_12.png\")))\n\n# Detroit Aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/detroit_zoom_12.png\")))\n\n\n#img = color.rgb2gray(io.imread(\"images/grass_image2.jpg\"))\n\n# img = color.rgb2gray(io.imread(\"images/b_test_image_copy.jpg\"))\n#img = color.rgb2gray(io.imread(\"images/long_grass_sample.jpeg\"))\n#img = color.rgb2gray(io.imread(\"images/diagnol_lines.jpg\"))\n\n#img = color.rgb2gray(io.imread(\"images/san_francisco_scale_zoom_12.png\"))\n\n#img = color.rgb2gray(io.imread(\"images/diagnol_lines_flipped.jpg\"))\n#img = color.rgb2gray(io.imread(\"images/long_grass_sample_cropped.jpg\"))\n\n# aerial rotated image\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\"))\n\n# zoomed internet photo\n#img = color.rgb2gray(io.imread(\"images/dead_grass_zoom.jpeg\"))\n\n\n# zoomed in 11\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_11.jpg\"))\n\n# zoomed in 12\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_12.jpg\"))\n\n# zoomed in 16\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_16_side.jpg\"))\n\n\n\n# real one\n#img = color.rgb2gray(io.imread(\"images/living_labs_real_grass_image.jpg\"))\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n    \n    rescaled_file_path = f\"images/plots/aerial_cities/{x}.jpg\"\n    \n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n    \n    # Hard-Code height to 200 pixels\n    height = 200\n    \n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n    \n    # Resize the image\n    resized_img = resize(img, (height, width))\n    \n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n    \n    # if (x == 1):\n    #   plot_width = 8\n    #   plot_height = 15\n    # else:\n    #   plot_width = 15\n    #   plot_height = 9\n    # \n    # plt.figure(figsize=(plot_width, plot_height))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    \n    # list for storing all magnitudes for image[x]\n    mag = []\n    \n    # list for storing all angles for image[x]\n    theta = []\n    \n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 0.6666666666666666\nResized Width: 300\nAspect Ratio: 1.5\nResized Width: 133\nAspect Ratio: 0.6666666666666666\nResized Width: 300\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.2: Aerial Cityscape Images Rescaled and Converted to Greyscale",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#build-data-frames-for-each-aerial-cityscape",
    "href": "results.html#build-data-frames-for-each-aerial-cityscape",
    "title": "4  Results",
    "section": "4.5 Build Data Frames for Each Aerial Cityscape",
    "text": "4.5 Build Data Frames for Each Aerial Cityscape\n\n\nCode\nmag_sf = np.array(mag_list[0])\ntheta_sf = np.array(theta_list[0])\n\n\nmag_salt_lake = np.array(mag_list[1])\ntheta_salt_lake = np.array(theta_list[1])\n\n\nmag_detroit = np.array(mag_list[2])\ntheta_detroit = np.array(theta_list[2])",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#plot-magnitudes-as-image-for-each-aerial-cityscape",
    "href": "results.html#plot-magnitudes-as-image-for-each-aerial-cityscape",
    "title": "4  Results",
    "section": "4.6 Plot Magnitudes as Image for each Aerial Cityscape",
    "text": "4.6 Plot Magnitudes as Image for each Aerial Cityscape\n\n\nCode\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/sf_mag.png\", dpi=300)\n\n\n\n\nCode\n# plt.figure(figsize=(8, 15))\n# #plt.title('Salt Lake City, UT Gradient Magnitudes')\n# plt.imshow(mag_list[1], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/salt_lake_mag.png\", dpi=300)\n\n\n\n\nCode\n# plt.figure(figsize=(15, 8))\n# #plt.title('Detroit, MI Gradient Magnitudes')\n# plt.imshow(mag_list[2], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/detroit_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.3: Aerial Cityscape Magnitudes",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#create-data-frame-for-each-image",
    "href": "results.html#create-data-frame-for-each-image",
    "title": "4  Results",
    "section": "4.7 Create Data Frame for Each Image",
    "text": "4.7 Create Data Frame for Each Image\n\n\nCode\n# Diagonal DF\nsf_hog_df &lt;- data.frame(mag = as.vector(py$mag_sf),\n                              theta = as.vector((py$theta_sf))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# San Francisco DF\nsalt_lake_hog_df &lt;- data.frame(mag = as.vector(py$mag_salt_lake),\n                              theta = as.vector((py$theta_salt_lake))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# Internet Grass DF\ndetroit_hog_df &lt;- data.frame(mag = as.vector(py$mag_detroit),\n                              theta = as.vector((py$theta_detroit))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n# List of all Data frames\nstandard_df_list = list(sf_hog_df,\n                        salt_lake_hog_df, \n                        detroit_hog_df)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#create-histograms-of-gradient-magnitudes-and-angles-for-aerial-cityscapes",
    "href": "results.html#create-histograms-of-gradient-magnitudes-and-angles-for-aerial-cityscapes",
    "title": "4  Results",
    "section": "4.8 Create Histograms of Gradient Magnitudes and Angles for Aerial Cityscapes",
    "text": "4.8 Create Histograms of Gradient Magnitudes and Angles for Aerial Cityscapes\n\n\nCode\nsf_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[1]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"San Francisco Cityscape Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#sf_histogram_mag_plot\n\nsf_mag_filter &lt;- 0.4\n\nggsave(\"images/plots/aerial_cities/sf_histogram_mag_plot.jpg\", sf_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\nsf_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"San Francisco Cityscape Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#sf_histogram_theta_plot\n\nggsave(\"images/plots/aerial_cities/sf_histogram_theta_plot.jpg\", sf_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nsalt_lake_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[2]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Salt Lake City Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#salt_lake_histogram_mag_plot\n\nsalt_lake_mag_filter &lt;- 0.12\n\nggsave(\"images/plots/aerial_cities/salt_lake_histogram_mag_plot.jpg\", salt_lake_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\nsalt_lake_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Salt Lake City Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#salt_lake_histogram_theta_plot\n\nggsave(\"images/plots/aerial_cities/salt_lake_histogram_theta_plot.jpg\", salt_lake_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\ndetroit_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[3]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Detroit Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#detroit_histogram_mag_plot\n\ndetroit_mag_filter &lt;- 0.15\n\nggsave(\"images/plots/aerial_cities/detroit_histogram_mag_plot.jpg\", detroit_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\ndetroit_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Detroit, MI Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#detroit_histogram_theta_plot\n\nggsave(\"images/plots/aerial_cities/detroit_histogram_theta_plot.jpg\", detroit_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n \n\n\n\n\nFigure 4.4: Aerial Cityscape Magnitudes and Angles",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#build-new-distributed-histogram-data-frames",
    "href": "results.html#build-new-distributed-histogram-data-frames",
    "title": "4  Results",
    "section": "4.9 Build New Distributed Histogram Data Frames",
    "text": "4.9 Build New Distributed Histogram Data Frames\n\n\nCode\n# Define the number of bins\nnum_bins &lt;- 9\n\n# function to calculate the contributions to neighboring bins\ncalculate_bin_contributions &lt;- function(angle, magnitude, num_bins) {\n  bin_width &lt;- 180 / num_bins\n  contributions &lt;- numeric(num_bins)\n  \n  # get the central bin\n  central_bin &lt;- floor(angle / bin_width) %% num_bins\n  next_bin &lt;- (central_bin + 1) %% num_bins\n  \n  # get contributions to neighboring bins\n  weight &lt;- (1 - abs((angle %% bin_width) / bin_width)) * magnitude\n  \n  contributions[central_bin + 1] &lt;- weight\n  contributions[next_bin + 1] &lt;- magnitude - weight\n  \n  return(list(contributions[1],\n         contributions[2],\n         contributions[3],\n         contributions[4],\n         contributions[5],\n         contributions[6],\n         contributions[7],\n         contributions[8],\n         contributions[9])\n         )\n}\n\nfiltered_aerial_standard_df_list &lt;-list(sf_hog_df %&gt;%\n                                   filter(mag &gt;= sf_mag_filter),\n                                 salt_lake_hog_df %&gt;%\n                                   filter(mag &gt;= salt_lake_mag_filter), \n                                 detroit_hog_df %&gt;%\n                                   filter(mag &gt;= detroit_mag_filter))\naerial_contribution_df_list &lt;- list()\n\n \nfor (i in 1:length(filtered_aerial_standard_df_list)){\n  \n  aerial_contribution_hog_df &lt;- \n    filtered_aerial_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n  aerial_split_histo_df &lt;- \n    aerial_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\", \n                 values_to = \"contribution\", \n                 cols = 4:ncol(aerial_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n  \n  \n  aerial_contribution_df_list[[i]] &lt;- aerial_split_histo_df\n\n}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#generate-polar-plots-for-standard-historgrams",
    "href": "results.html#generate-polar-plots-for-standard-historgrams",
    "title": "4  Results",
    "section": "4.10 Generate Polar Plots for Standard Historgrams",
    "text": "4.10 Generate Polar Plots for Standard Historgrams\n\n\nCode\nsf_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of San Francisco, CA Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/aerial_cities/sf_standard_polar_plot.jpg\", sf_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nsalt_lake_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Salt Lake City, UT Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/aerial_cities/salt_lake_standard_polar_plot.jpg\", salt_lake_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\ndetroit_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Detroit, MI Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/aerial_cities/detroit_standard_polar_plot.jpg\", detroit_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nall_standard_city_plots &lt;- ggpubr::ggarrange(sf_plot, \n                                             salt_lake_plot, \n                                             detroit_plot)\n\nggsave(\"images/plots/aerial_cities/all_standard_polar_plots.jpg\", \n       all_standard_city_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.5: Aerial Cityscape Standard Polar Plots",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#generate-polar-plots-for-distributed-historgrams",
    "href": "results.html#generate-polar-plots-for-distributed-historgrams",
    "title": "4  Results",
    "section": "4.11 Generate Polar Plots for Distributed Historgrams",
    "text": "4.11 Generate Polar Plots for Distributed Historgrams\n\n\nCode\nsf_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[1]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of San Francisco, CA Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/aerial_cities/sf_contribution_polar_plot.jpg\", sf_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nsalt_lake_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[2]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Salt Lake City, UT Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/aerial_cities/salt_lake_contribution_polar_plot.jpg\", salt_lake_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\ndetroit_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[3]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Detroit, MI Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/aerial_cities/detroit_contribution_polar_plot.jpg\", detroit_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nall_aerial_contribution_plots &lt;- ggpubr::ggarrange(sf_split_plot, \n                                                   salt_lake_split_plot, \n                                                   detroit_split_plot)\n\nggsave(\"images/plots/aerial_cities/all_aerial_contribution_plots.jpg\", \n       all_aerial_contribution_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.6: Aerial Cityscape Distributed Method Polar Plots",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#collect-hog-features-for-grass-images",
    "href": "results.html#collect-hog-features-for-grass-images",
    "title": "4  Results",
    "section": "4.12 Collect HOG Features for Grass Images",
    "text": "4.12 Collect HOG Features for Grass Images\n\n\nCode\n# List for storing images\nimg_list = []\n\n# Internet Grass Image\nimg_list.append(color.rgb2gray(io.imread(\"images/grass_image2.jpg\")))\n\n# Living Labs Rotated Aerial Grass\nimg_list.append(color.rgb2gray(io.imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\")))\n\n# Living Labs Grass Close-up\nimg_list.append(color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_12.jpg\")))\n\n\n#img = color.rgb2gray(io.imread(\"images/grass_image2.jpg\"))\n\n# img = color.rgb2gray(io.imread(\"images/b_test_image_copy.jpg\"))\n#img = color.rgb2gray(io.imread(\"images/long_grass_sample.jpeg\"))\n#img = color.rgb2gray(io.imread(\"images/diagnol_lines.jpg\"))\n\n#img = color.rgb2gray(io.imread(\"images/san_francisco_scale_zoom_12.png\"))\n\n#img = color.rgb2gray(io.imread(\"images/diagnol_lines_flipped.jpg\"))\n#img = color.rgb2gray(io.imread(\"images/long_grass_sample_cropped.jpg\"))\n\n# aerial rotated image\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\"))\n\n# zoomed internet photo\n#img = color.rgb2gray(io.imread(\"images/dead_grass_zoom.jpeg\"))\n\n\n# zoomed in 11\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_11.jpg\"))\n\n# zoomed in 12\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_12.jpg\"))\n\n# zoomed in 16\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_16_side.jpg\"))\n\n\n\n# real one\n#img = color.rgb2gray(io.imread(\"images/living_labs_real_grass_image.jpg\"))\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n    \n    rescaled_file_path = f\"images/plots/grass/{x}.jpg\"\n    \n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n    \n    # Hard-Code height to 200 pixels\n    height = 200\n    \n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n    \n    # Resize the image\n    resized_img = resize(img, (height, width))\n    \n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n    \n    # plt.figure(figsize=(plot_width, plot_height))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    \n    # list for storing all magnitudes for image[x]\n    mag = []\n    \n    # list for storing all angles for image[x]\n    theta = []\n    \n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 0.662751677852349\nResized Width: 301\nAspect Ratio: 0.4904214559386973\nResized Width: 407\nAspect Ratio: 0.5625\nResized Width: 355\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nLiving Labs Aerial Image\n\n\n\n\n\n\n\nLiving Labs Close-Up Image\n\n\n\n\n\n\nFigure 4.7: Grass Images Rescaled and Converted to Greyscale",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#build-data-frames-for-each-grass-image",
    "href": "results.html#build-data-frames-for-each-grass-image",
    "title": "4  Results",
    "section": "4.13 Build Data Frames for Each Grass Image",
    "text": "4.13 Build Data Frames for Each Grass Image\n\n\nCode\nmag_internet_grass = np.array(mag_list[0])\ntheta_internet_grass = np.array(theta_list[0])\n\n\nmag_aerial_living_lab = np.array(mag_list[1])\ntheta_aerial_living_lab = np.array(theta_list[1])\n\n\nmag_close_up_living_lab = np.array(mag_list[2])\ntheta_close_up_living_lab = np.array(theta_list[2])",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#plot-magnitudes-as-image-for-each-grass-images",
    "href": "results.html#plot-magnitudes-as-image-for-each-grass-images",
    "title": "4  Results",
    "section": "4.14 Plot Magnitudes as Image for each Grass Images",
    "text": "4.14 Plot Magnitudes as Image for each Grass Images\n\n\nCode\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/internet_grass_mag.png\", dpi=300)\n\n\n\n\nCode\n# plt.figure(figsize=(15, 8))\n# #plt.title('Salt Lake City, UT Gradient Magnitudes')\n# plt.imshow(mag_list[1], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/aerial_living_lab_grass_mag.png\", dpi=300)\n\n\n\n\nCode\n# plt.figure(figsize=(15, 8))\n# #plt.title('Detroit, MI Gradient Magnitudes')\n# plt.imshow(mag_list[2], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/close_up_living_lab_grass_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass\n\n\n\n\n\n\n\nAerial Living Labs\n\n\n\n\n\n\n\nClose-Up Living Labs\n\n\n\n\n\n\nFigure 4.8: Grass Image Magnitudes",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#create-data-frame-for-each-image-1",
    "href": "results.html#create-data-frame-for-each-image-1",
    "title": "4  Results",
    "section": "4.15 Create Data Frame for Each Image",
    "text": "4.15 Create Data Frame for Each Image\n\n\nCode\n# Diagonal DF\ninternet_grass_hog_df &lt;- data.frame(mag = as.vector(py$mag_internet_grass),\n                              theta = as.vector((py$theta_internet_grass))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# San Francisco DF\naerial_living_lab_hog_df &lt;- data.frame(mag = as.vector(py$mag_aerial_living_lab),\n                              theta = as.vector((py$theta_aerial_living_lab))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# Internet Grass DF\nclose_up_living_lab_hog_df &lt;- data.frame(mag = as.vector(py$mag_close_up_living_lab),\n                              theta = as.vector((py$theta_close_up_living_lab))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n# List of all Data frames\ngrass_standard_df_list = list(internet_grass_hog_df,\n                        aerial_living_lab_hog_df, \n                        close_up_living_lab_hog_df)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#create-histograms-of-gradient-magnitudes-and-angles-for-grass-images",
    "href": "results.html#create-histograms-of-gradient-magnitudes-and-angles-for-grass-images",
    "title": "4  Results",
    "section": "4.16 Create Histograms of Gradient Magnitudes and Angles for Grass Images",
    "text": "4.16 Create Histograms of Gradient Magnitudes and Angles for Grass Images\n\n\nCode\ninternet_grass_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[1]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Internet Grass Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#internet_grass_histogram_mag_plot\n\ninternet_grass_mag_filter &lt;- 0.3\n\nggsave(\"images/plots/grass/internet_grass_histogram_mag_plot.jpg\", internet_grass_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\ninternet_grass_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Internet Grass Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#internet_grass_histogram_theta_plot\n\nggsave(\"images/plots/grass/internet_grass_histogram_theta_plot.jpg\", internet_grass_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\naerial_living_lab_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[2]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Aerial Living Labs Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#aerial_living_lab_histogram_mag_plot\n\naerial_living_lab_mag_filter &lt;- 0.08\n\nggsave(\"images/plots/grass/aerial_living_lab_histogram_mag_plot.jpg\", \n       aerial_living_lab_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\naerial_living_lab_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Aerial Living Labs Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#aerial_living_lab_histogram_theta_plot\n\nggsave(\"images/plots/grass/aerial_living_lab_histogram_theta_plot.jpg\", \n       aerial_living_lab_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nclose_up_living_lab_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[3]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Close-Up Living Labs Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#close_up_living_lab_histogram_mag_plot\n\nclose_up_living_lab_mag_filter &lt;- 0.12\n\nggsave(\"images/plots/grass/close_up_living_lab_histogram_mag_plot.jpg\", close_up_living_lab_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\nclose_up_living_lab_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Close-Up Living Labs Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#close_up_living_lab_histogram_theta_plot\n\nggsave(\"images/plots/grass/close_up_living_lab_histogram_theta_plot.jpg\", close_up_living_lab_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n \n\n\n\n\nFigure 4.9: Grass Image Magnitudes and Angles",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#build-new-distributed-histogram-data-frames-for-grass-images",
    "href": "results.html#build-new-distributed-histogram-data-frames-for-grass-images",
    "title": "4  Results",
    "section": "4.17 Build New Distributed Histogram Data Frames for Grass Images",
    "text": "4.17 Build New Distributed Histogram Data Frames for Grass Images\n\n\nCode\n# Define the number of bins\nnum_bins &lt;- 9\n\nfiltered_grass_standard_df_list &lt;-list(internet_grass_hog_df %&gt;%\n                                          filter(mag &gt;= internet_grass_mag_filter),\n                                        aerial_living_lab_hog_df %&gt;%\n                                          filter(mag &gt;= aerial_living_lab_mag_filter), \n                                        close_up_living_lab_hog_df %&gt;%\n                                          filter(mag &gt;= close_up_living_lab_mag_filter))\ngrass_contribution_df_list &lt;- list()\n\n \nfor (i in 1:length(filtered_grass_standard_df_list)){\n  \n  grass_contribution_hog_df &lt;- \n    filtered_grass_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n  grass_split_histo_df &lt;- \n    grass_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\", \n                 values_to = \"contribution\", \n                 cols = 4:ncol(grass_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n  \n  \n  grass_contribution_df_list[[i]] &lt;- grass_split_histo_df\n\n}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#generate-grass-image-polar-plots-for-standard-historgrams",
    "href": "results.html#generate-grass-image-polar-plots-for-standard-historgrams",
    "title": "4  Results",
    "section": "4.18 Generate Grass Image Polar Plots for Standard Historgrams",
    "text": "4.18 Generate Grass Image Polar Plots for Standard Historgrams\n\n\nCode\ninternet_grass_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Internet Grass Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/grass/internet_grass_standard_polar_plot.jpg\", internet_grass_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\naerial_living_lab_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Aerial Living Labs Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/grass/aerial_living_lab_standard_polar_plot.jpg\", aerial_living_lab_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nclose_up_living_lab_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Close-Up Living Lab Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/grass/close_up_living_lab_standard_polar_plot.jpg\", close_up_living_lab_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nall_standard_grass_plots &lt;- ggpubr::ggarrange(internet_grass_plot, \n                                             aerial_living_lab_plot, \n                                             close_up_living_lab_plot)\n\nggsave(\"images/plots/grass/all_grass_standard_polar_plots.jpg\", \n       all_standard_grass_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nAerial Living Labs Image\n\n\n\n\n\n\n\nClose-Up Living Labs Image\n\n\n\n\n\n\nFigure 4.10: Aerial Cityscape Standard Polar Plots",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#generate-grass-image-polar-plots-for-distributed-historgrams",
    "href": "results.html#generate-grass-image-polar-plots-for-distributed-historgrams",
    "title": "4  Results",
    "section": "4.19 Generate Grass Image Polar Plots for Distributed Historgrams",
    "text": "4.19 Generate Grass Image Polar Plots for Distributed Historgrams\n\n\nCode\ninternet_grass_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[1]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Internet Grass Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/grass/internet_grass_contribution_polar_plot.jpg\", internet_grass_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\naerial_living_lab_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[2]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Aerial Living Lab Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/grass/aerial_living_lab_contribution_polar_plot.jpg\", aerial_living_lab_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nclose_up_living_lab_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[3]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Close-Up Living Lab Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/grass/close_up_living_lab_contribution_polar_plot.jpg\", close_up_living_lab_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nCode\nall_grass_contribution_plots &lt;- ggpubr::ggarrange(internet_grass_split_plot, \n                                                  aerial_living_lab_split_plot, \n                                                  close_up_living_lab_split_plot)\n\nggsave(\"images/plots/grass/all_grass_contribution_plots.jpg\", \n       all_grass_contribution_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nAerial Living Labs Image\n\n\n\n\n\n\n\nClose-Up Living Labs Grass Image\n\n\n\n\n\n\nFigure 4.11: Distributed Method Polar Plots for Grass Images",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#collect-hog-features-for-backflip-image",
    "href": "results.html#collect-hog-features-for-backflip-image",
    "title": "4  Results",
    "section": "4.20 Collect HOG Features for Backflip Image",
    "text": "4.20 Collect HOG Features for Backflip Image\n\n\nCode\n# List for storing images\nimg_list = []\n\n# SF aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/TitusFlip.jpg\")))\n\n\n#img = color.rgb2gray(io.imread(\"images/grass_image2.jpg\"))\n\n# img = color.rgb2gray(io.imread(\"images/b_test_image_copy.jpg\"))\n#img = color.rgb2gray(io.imread(\"images/long_grass_sample.jpeg\"))\n#img = color.rgb2gray(io.imread(\"images/diagnol_lines.jpg\"))\n\n#img = color.rgb2gray(io.imread(\"images/san_francisco_scale_zoom_12.png\"))\n\n#img = color.rgb2gray(io.imread(\"images/diagnol_lines_flipped.jpg\"))\n#img = color.rgb2gray(io.imread(\"images/long_grass_sample_cropped.jpg\"))\n\n# aerial rotated image\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\"))\n\n# zoomed internet photo\n#img = color.rgb2gray(io.imread(\"images/dead_grass_zoom.jpeg\"))\n\n\n# zoomed in 11\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_11.jpg\"))\n\n# zoomed in 12\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_12.jpg\"))\n\n# zoomed in 16\n#img = color.rgb2gray(io.imread(\"images/living_lab_aerial/LL_zoomed_in_16_side.jpg\"))\n\n\n\n# real one\n#img = color.rgb2gray(io.imread(\"images/living_labs_real_grass_image.jpg\"))\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n\n    rescaled_file_path = f\"images/plots/backflip/{x}.jpg\"\n\n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n\n    # Hard-Code height to 200 pixels\n    height = 200\n\n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n\n    # Resize the image\n    resized_img = resize(img, (height, width))\n\n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n\n    # if (x == 1):\n    #   plot_width = 8\n    #   plot_height = 15\n    # else:\n    #   plot_width = 15\n    #   plot_height = 8\n\n    # plt.figure(figsize=(15, 8))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    # list for storing all magnitudes for image[x]\n    mag = []\n\n    # list for storing all angles for image[x]\n    theta = []\n\n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 1.25\nResized Width: 160\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip\n\n\n\n\n\n\nFigure 4.12: Skiing Backflip Image Rescaled and Converted to Greyscale",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#build-data-frames-for-backflip-image",
    "href": "results.html#build-data-frames-for-backflip-image",
    "title": "4  Results",
    "section": "4.21 Build Data Frames for Backflip Image",
    "text": "4.21 Build Data Frames for Backflip Image\n\n\nCode\nmag_flip = np.array(mag_list[0])\ntheta_flip = np.array(theta_list[0])",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#plot-magnitudes-as-image-for-diagonal-lines",
    "href": "results.html#plot-magnitudes-as-image-for-diagonal-lines",
    "title": "4  Results",
    "section": "4.22 Plot Magnitudes as Image for Diagonal Lines",
    "text": "4.22 Plot Magnitudes as Image for Diagonal Lines\n\n\nCode\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/backflip/backflip_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip Image\n\n\n\n\n\n\nFigure 4.13: Skiing Backflip Cityscape Magnitudes as Image",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#create-data-frame-for-backflip-image",
    "href": "results.html#create-data-frame-for-backflip-image",
    "title": "4  Results",
    "section": "4.23 Create Data Frame for Backflip Image",
    "text": "4.23 Create Data Frame for Backflip Image\n\n\nCode\n# Flip DF\nbackflip_hog_df &lt;- data.frame(mag = as.vector(py$mag_flip),\n                              theta = as.vector((py$theta_flip))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# List of all Data frames\nflip_standard_df_list = list(backflip_hog_df)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#create-histograms-of-gradient-magnitudes-and-angles-for-backflip-image",
    "href": "results.html#create-histograms-of-gradient-magnitudes-and-angles-for-backflip-image",
    "title": "4  Results",
    "section": "4.24 Create Histograms of Gradient Magnitudes and Angles for Backflip Image",
    "text": "4.24 Create Histograms of Gradient Magnitudes and Angles for Backflip Image\n\n\nCode\nflip_histogram_mag_plot &lt;-\n  ggplot(flip_standard_df_list[[1]],\n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() +\n  labs(x = \"Gradient Magnitude\",\n       y = \"Count\",\n       title = \"Skiing Backflip Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#flip_histogram_mag_plot\n\nflip_mag_filter &lt;- 0.2\n\nggsave(\"images/plots/backflip/backflip_histogram_mag_plot.jpg\", flip_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\nflip_histogram_theta_plot &lt;-\n  ggplot(flip_standard_df_list[[1]],\n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() +\n  labs(x = \"Gradient Angle\",\n       y = \"Count\",\n       title = \"Skiing Backflip Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n#flip_histogram_theta_plot\n\nggsave(\"images/plots/backflip/backflip_histogram_theta_plot.jpg\", flip_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.14: Skiing Backflip Magnitudes and Angles",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#build-new-distributed-histogram-data-frame-for-backflip-image",
    "href": "results.html#build-new-distributed-histogram-data-frame-for-backflip-image",
    "title": "4  Results",
    "section": "4.25 Build New Distributed Histogram Data Frame for Backflip Image",
    "text": "4.25 Build New Distributed Histogram Data Frame for Backflip Image\n\n\nCode\n# Define the number of bins\nnum_bins &lt;- 9\n\nfiltered_flip_standard_df_list &lt;-list(backflip_hog_df %&gt;%\n                                        filter(mag &gt;= flip_mag_filter))\n\nflip_contribution_df_list &lt;- list()\n\n\nfor (i in 1:length(filtered_flip_standard_df_list)){\n\n  flip_contribution_hog_df &lt;-\n    filtered_flip_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n\n  flip_split_histo_df &lt;-\n    flip_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\",\n                 values_to = \"contribution\",\n                 cols = 4:ncol(flip_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n\n\n  flip_contribution_df_list[[i]] &lt;- flip_split_histo_df\n\n}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#generate-polar-plots-for-standard-historgrams-for-backflip-image",
    "href": "results.html#generate-polar-plots-for-standard-historgrams-for-backflip-image",
    "title": "4  Results",
    "section": "4.26 Generate Polar Plots for Standard Historgrams for Backflip Image",
    "text": "4.26 Generate Polar Plots for Standard Historgrams for Backflip Image\n\n\nCode\nflip_plot &lt;-\n  ggplot(filtered_flip_standard_df_list[[1]],\n         aes(x = theta)) +\n  geom_histogram(colour = \"black\",\n                 fill = \"lightblue\",\n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\",\n    start = 0,\n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315),\n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Skiing Backflip Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/backflip/backflip_standard_polar_plot.jpg\", flip_plot, width = 6, height = 4, dpi = 300)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#generate-polar-plots-for-distributed-historgrams-of-diagonal-image",
    "href": "results.html#generate-polar-plots-for-distributed-historgrams-of-diagonal-image",
    "title": "4  Results",
    "section": "4.27 Generate Polar Plots for Distributed Historgrams of Diagonal Image",
    "text": "4.27 Generate Polar Plots for Distributed Historgrams of Diagonal Image\n\n\nCode\nflip_split_plot &lt;-\n  ggplot(flip_contribution_df_list[[1]],\n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\",\n                 fill = \"lightblue\",\n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\",\n    start = 0,\n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315),\n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Skiing Backflip Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\nggsave(\"images/plots/backflip/backflip_contribution_polar_plot.jpg\", flip_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.15: Skiing Backflip Image Distributed Method Polar Plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco Cityscape\nSalt Lake City Cityscape\nDetroit Cityscape\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nInternet Grass Image\nLiving Labs Aerial Image\nLiving Labs Close-Up Image\nInternet Grass\nAerial Living Labs\nClose-Up Living Labs\nFigure 4.9: Grass Image Magnitudes and Angles\nFigure 4.9: Grass Image Magnitudes and Angles\nFigure 4.9: Grass Image Magnitudes and Angles\nFigure 4.9: Grass Image Magnitudes and Angles\nFigure 4.9: Grass Image Magnitudes and Angles\nFigure 4.9: Grass Image Magnitudes and Angles\nInternet Grass Image\nAerial Living Labs Image\nClose-Up Living Labs Image\nInternet Grass Image\nAerial Living Labs Image\nClose-Up Living Labs Grass Image\nSkiing Backflip\nSkiing Backflip Image\nFigure 4.14: Skiing Backflip Magnitudes and Angles\nFigure 4.15: Skiing Backflip Image Distributed Method Polar Plot",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results</span>"
    ]
  }
]