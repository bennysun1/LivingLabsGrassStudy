[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applying the Histogram of Oriented Gradients Algorithm for Detecting Grass Lay Direction",
    "section": "",
    "text": "Subsistence-oriented indigenous communities across Alaska rely heavily on Traditional Ecological Knowledge (TEK), a holistic understanding of their environment acquired through generations of observation and cultural transmission. Among the Anishinaabek tradition, sweetgrass symbolizes wisdom and knowledge, passed down from elders to younger generations. Indigenous hunters and gatherers have long observed the alignment of grass and plants after the growing season as indicative of prevailing wind directions. Predominant wind direction serves a crucial role to subsistence practitioners when hunting, fishing, settling, and keeping track of changing weather. Due to the remote and harsh conditions, traditional weather stations are absent to measure shifts in historically predominant wind directions. On islands like St. Lawrence Island in Savoonga, AK, natives have observed a shift from historically predominant northerly wind patterns to southerly and easterly and dominated winds. In a previous study Dr. Jon Rosales (Environmental Studies) and his team collected images of grass lay from St. Lawrence University’s Living Laboratory and manually attempted to measure grass lay angles and relate them with wind data. This research project seeks to reinforce Traditional Ecological Knowledge (TEK) with Scientific Ecological Knowledge (SEK) to develop our understanding of Alaskan indigenous wisdom and its relation with modern scientific findings. We investigated the Histogram of Oriented Gradients (HOG) algorithm to automate the measurement of grass lay angles. We applied the algorithm to various images sampled from the internet and the Living Laboratory to test its viability.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Abstract</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "To evaluate the algorithm’s performance, we collected images with varying levels of complexity. Beginning with basic geometric shapes and diagonal lines sourced from Google Images, we established a foundational data set for initial testing. We incorporated aerial cityscapes including San Francisco, Salt Lake City, and Detroit from Mapbox, aiming to assess the algorithm’s ability in identifying urban grid structures such as streets and highways. Additionally, we included images of grass sourced from both Google Images and Dr. Jon Rosales (Environmental Studies) at St. Lawrence University’s Living Lab. The images sourced from Google Images were primarily The Living Lab images included aerial and close up shots, with special attention given to aerial images which featured a northern indicator line. To ensure consistent orientation, each aerial image was manually rotated to align north facing direction upwards before analysis, with the northern indicator subsequently removed to avoid introducing artificial lines in the image.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Diagnol Lines\n\n\n\n\n\n\n\n\n\n\n\n(b) Skiing Backflip(St. Lawrence University)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Downtown San Francisco, CA\n\n\n\n\n\n\n\n\n\n\n\n(d) Aerial Grass Image(St. Lawrence University Living Laboratory)\n\n\n\n\n\n\n\nFigure 2.1: Sample of Images for Evaluation\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.1 (a): Diagnol Lines\nFigure 2.1 (b): Skiing Backflip(St. Lawrence University)\nFigure 2.1 (c): Downtown San Francisco, CA\nFigure 2.1 (d): Aerial Grass Image(St. Lawrence University Living Laboratory)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "methods.html",
    "href": "methods.html",
    "title": "3  Methods",
    "section": "",
    "text": "The HOG algorithm, introduced by Navneet Dalal and Bill Triggs in 2005, is a popular technique for object detection in images. The algorithm can identify gradient magnitudes and angles at each pixel in an image. The preliminary steps involved using the ‘skimage’ library from Python to preprocess the images of interest. This included loading, resizing, and converting the images to grayscale. Images were rescaled to standardize their resolutions and preserve their aspect ratios to prevent distortion that could affect the accuracy of angle identification. Converting the images to grayscale was necessary because it allowed for focusing on a single channel to represent pixel intensity, rather than three channels (red, green, and blue).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Colored Image with Diagonal Lines\n\n\n\n\n\n\n\nFigure 3.1: Rescaling and Converting Image to Greyscale\n\n\n\n\n\n\n\n      The HOG features were then computed for the resized images, which involved calculating the gradient magnitudes and angles at each pixel. The gradient magnitude at each pixel is comprised of the gradients in the ‘x’ and ‘y’ directions. The gradient in the x-direction is computed by subtracting the pixel value to the left of pixel of interest is subtracted from the pixel value to its right. Similarly, the gradient in the y-direction is calculated by pixel value below the pixel of interest is subtracted from the pixel value above the pixel of interest.\n\n\n\n\\(G_x=I(r,c+1)−I(r,c-1)\\)\n\\(G_y=I(r+1,c)−I(r-1,c)\\)\n\n\n      Now to calculate the gradient magnitude at the pixel of interest, the Pythagorean Theorem can be utilized where the gradient magnitude is equal to the square root of the x-gradient squared plus the y-gradient squared. The angle at a given pixel can be calculated by taking the inverse tangent of its y-gradient divided by its x-gradient. It is important to note all angles produced by this algorithm are between zero and one hundred eighty degrees. This occurs, because the inverse tangent function used for calculating a given pixel’s angle cannot distinguish between all four quadrants.\n\n\n\n\n\\(Magnitude(\\mu)=\\sqrt{G_{x}^{2} + G_{y}^{2}}\\)\n\\(Angle(\\Theta)=tan^{−1} (\\frac{G_y}{G_x})\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Gradient Magnitudes of Diagonal Lines Image\n\n\n\n\n\n\n\nFigure 3.2: Plotting Gradient Magnitudes as Image\n\n\n\n\n\n\n\n\n\n      Next, histograms are constructed to visualize the distribution of gradient magnitudes and angles. Two different techniques for creating gradient angle histograms were implemented. The first histogram was created by counting the number of angles that fell into their respective bins. The second scheme factors in a pixel’s gradient magnitude and its allocation to its bordering bins. Here, the weight assigned to each bin is calculated by the angle’s deviation from the center of its central bin. This approach allows for a more representative histogram which splits angles between bins and takes their magnitudes into account. Lastly, these histograms are converted to polar histograms so the primary angles can be visualized and compared to their original images.\n\n\n\n\n\n\n\n\n\n\n\n\nHistograms of Gradient Magnitudes\n\n\n\n\n\n\n\nHistograms of Gradient Angles\n\n\n\n\n\n\n\nPolar Plot Using Standard Histogram Technique\n\n\n\n\n\n\n\nPolar Plot Using Distributed Histogram Technique\n\n\n\n\n\n\nFigure 3.3: Plotting Histograms of Gradients\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.1 (a): Colored Image with Diagonal Lines\nFigure 3.2 (a): Gradient Magnitudes of Diagonal Lines Image\nHistograms of Gradient Magnitudes\nHistograms of Gradient Angles\nPolar Plot Using Standard Histogram Technique\nPolar Plot Using Distributed Histogram Technique",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Methods</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html",
    "href": "aerial_images_results.html",
    "title": "4  Aerial Cityscapes",
    "section": "",
    "text": "Load R Packages and Python Libraries\nLoad R Packages\n# Load R Packages\nlibrary(reticulate)\nlibrary(tidyverse)\nlibrary(mapsapi)\nlibrary(mapboxapi)\nlibrary(magick)\nCode\n# Load Python Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage import color\nfrom skimage.transform import resize\nimport math\nfrom skimage.feature import hog\nimport numpy as np",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#download-aerial-city-images-from-mapbox",
    "href": "aerial_images_results.html#download-aerial-city-images-from-mapbox",
    "title": "4  Aerial Cityscapes",
    "section": "Download Aerial City Images from Mapbox",
    "text": "Download Aerial City Images from Mapbox\n\n\nRead in Mapbox Key from System Enviroment\n# Get Mapbox token from System Environment \nkey &lt;- Sys.getenv(\"mapbox_key\") \n\n\n\n\nDownload map of San Francisco, CA\n# Download map of San Francisco, CA\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 300,\n  height = 200, \n  image = T, latitude = 37.792004, longitude = -122.428079, zoom = 12\n)\n\nmagick::image_write(map, \"images/san_francisco_scale_zoom_12.png\")\n\n\n\n\nDownload map of Salt Lake City, UT\n# Download map of Salt Lake City, UT\npoints_of_interest &lt;- tibble::tibble(\n  longitude = c(-112.065945, -111.853948, \n                -111.852956, -112.023371),\n  \n  latitude = c(40.794275, 40.791516, \n               40.502308, 40.502308)\n  )\n\nprepped_pois &lt;- prep_overlay_markers(\n  data = points_of_interest,\n  marker_type = \"pin-l\",\n  label = 1:4,\n  color = \"#fff\", \n)\n\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 800,\n  height = 1200, \n  image = T, \n  latitude = 40.7,\n  longitude = -111.876183, zoom = 12\n)\n\nmagick::image_write(map, \"images/salt_lake_city_zoom_12.png\")\n\n\n\n\nDownload map of Detroit, MI\n# Download map of Detroit, MI\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 1200,\n  height = 800, \n  image = T, \n  latitude = 42.336322,\n  longitude = -83.048705, zoom = 12\n)\n\nmagick::image_write(map, \"images/detroit_zoom_12.png\")\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco Cityscape\n\n\n\n\n\n\n\nSalt Lake City Cityscape\n\n\n\n\n\n\n\nDetroit Cityscape\n\n\n\n\n\n\nFigure 4.1: Aerial Cityscape Images",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#collect-hog-features-for-aerial-cityscapes",
    "href": "aerial_images_results.html#collect-hog-features-for-aerial-cityscapes",
    "title": "4  Aerial Cityscapes",
    "section": "Collect HOG Features for Aerial Cityscapes",
    "text": "Collect HOG Features for Aerial Cityscapes\n\n\nCode\n# List for storing images\nimg_list = []\n\n# SF aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/san_francisco_scale_zoom_12.png\")))\n\n# Salt Lake City Aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/salt_lake_city_zoom_12.png\")))\n\n# Detroit Aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/detroit_zoom_12.png\")))\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n    \n    rescaled_file_path = f\"images/plots/aerial_cities/{x}.jpg\"\n    \n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n    \n    # Hard-Code height to 200 pixels\n    height = 200\n    \n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n    \n    # Resize the image\n    resized_img = resize(img, (height, width))\n    \n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n    \n    # if (x == 1):\n    #   plot_width = 8\n    #   plot_height = 15\n    # else:\n    #   plot_width = 15\n    #   plot_height = 9\n    # \n    # plt.figure(figsize=(plot_width, plot_height))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    \n    # list for storing all magnitudes for image[x]\n    mag = []\n    \n    # list for storing all angles for image[x]\n    theta = []\n    \n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 0.6666666666666666\nResized Width: 300\nAspect Ratio: 1.5\nResized Width: 133\nAspect Ratio: 0.6666666666666666\nResized Width: 300\n\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.2: Aerial Cityscape Images Rescaled and Converted to Greyscale",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#build-data-frames-for-each-aerial-cityscape",
    "href": "aerial_images_results.html#build-data-frames-for-each-aerial-cityscape",
    "title": "4  Aerial Cityscapes",
    "section": "Build Data Frames for Each Aerial Cityscape",
    "text": "Build Data Frames for Each Aerial Cityscape\n\n\nCode\n# San Francisco DF of gradient magnitudes and angles\nmag_sf = np.array(mag_list[0])\ntheta_sf = np.array(theta_list[0])\n\n# Salt Lake City DF of gradient magnitudes and angles\nmag_salt_lake = np.array(mag_list[1])\ntheta_salt_lake = np.array(theta_list[1])\n\n# Detorit DF of gradient magnitudes and angles\nmag_detroit = np.array(mag_list[2])\ntheta_detroit = np.array(theta_list[2])",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#extract-gradient-magnitudes-and-angles-from-each-aerial-cityscape",
    "href": "aerial_images_results.html#extract-gradient-magnitudes-and-angles-from-each-aerial-cityscape",
    "title": "4  Aerial Cityscapes",
    "section": "Extract Gradient Magnitudes and Angles from each Aerial Cityscape",
    "text": "Extract Gradient Magnitudes and Angles from each Aerial Cityscape\n\n\nCode\n# Save gradient magnitudes of San Francisco in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/sf_mag.png\", dpi=300)\n\n\n\n\nCode\n# Save gradient magnitudes of Salt Lake City in image form\n\n# plt.figure(figsize=(8, 15))\n# #plt.title('Salt Lake City, UT Gradient Magnitudes')\n# plt.imshow(mag_list[1], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/salt_lake_mag.png\", dpi=300)\n\n\n\n\nCode\n# Save gradient magnitudes of Detroit in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('Detroit, MI Gradient Magnitudes')\n# plt.imshow(mag_list[2], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/detroit_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.3: Aerial Cityscape Magnitudes",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#create-data-frame-for-each-image",
    "href": "aerial_images_results.html#create-data-frame-for-each-image",
    "title": "4  Aerial Cityscapes",
    "section": "Create Data Frame for Each Image",
    "text": "Create Data Frame for Each Image\n\n\nMake data frame of San Francisco, CA magnitudes and angles\n# San Francisco DF\nsf_hog_df &lt;- data.frame(mag = as.vector(py$mag_sf),\n                              theta = as.vector((py$theta_sf))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nMake Data Frame of Salt Lake City, UT Magnitudes and Angles\n# Salt Lake City DF\nsalt_lake_hog_df &lt;- data.frame(mag = as.vector(py$mag_salt_lake),\n                              theta = as.vector((py$theta_salt_lake))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nMake Data Frame of Detroit, MI Magnitudes and Angles\n# Detroit DF\ndetroit_hog_df &lt;- data.frame(mag = as.vector(py$mag_detroit),\n                              theta = as.vector((py$theta_detroit))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nAdd the Data Frames Created Above to a List\n# List of all Data frames\nstandard_df_list = list(sf_hog_df,\n                        salt_lake_hog_df, \n                        detroit_hog_df)",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-aerial-cityscapes",
    "href": "aerial_images_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-aerial-cityscapes",
    "title": "4  Aerial Cityscapes",
    "section": "Create Histograms of Gradient Magnitudes and Angles for Aerial Cityscapes",
    "text": "Create Histograms of Gradient Magnitudes and Angles for Aerial Cityscapes\n\n\nPlot histogram of San Francisco, CA gradient magnitudes and define the magnitude level for later filtering\n# SF histogram of gradient mags\nsf_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[1]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"San Francisco Cityscape Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# sf mag filter level\nsf_mag_filter &lt;- 0.4\n\n# save image\nggsave(\"images/plots/aerial_cities/sf_histogram_mag_plot.jpg\", sf_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of San Francisco, CA gradient angles\n# SF histogram of gradient angles\nsf_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"San Francisco Cityscape Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/sf_histogram_theta_plot.jpg\", sf_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of Salt Lake City, UT gradient magnitudes and define the magnitude level for later filtering\n# slc histogram of gradient mags\nsalt_lake_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[2]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Salt Lake City Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# SLC mag filter level\nsalt_lake_mag_filter &lt;- 0.12\n\n# save image\nggsave(\"images/plots/aerial_cities/salt_lake_histogram_mag_plot.jpg\", salt_lake_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of Salt Lake City, UT gradient angles\n# slc histogram of gradient angles\nsalt_lake_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Salt Lake City Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/salt_lake_histogram_theta_plot.jpg\", salt_lake_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of Detroit, MI gradient magnitudes and define the magnitude level for later filtering\n# Detroit histogram of gradient mags\ndetroit_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[3]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Detroit Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Detroit mag filter level\ndetroit_mag_filter &lt;- 0.15\n\nggsave(\"images/plots/aerial_cities/detroit_histogram_mag_plot.jpg\", detroit_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of Detroit, MI gradient angles\n# Detroit histogram of gradient angles\ndetroit_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Detroit, MI Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/detroit_histogram_theta_plot.jpg\", detroit_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n \n\n\n\n\nFigure 4.4: Aerial Cityscape Magnitudes and Angles",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#build-new-distributed-histogram-data-frames",
    "href": "aerial_images_results.html#build-new-distributed-histogram-data-frames",
    "title": "4  Aerial Cityscapes",
    "section": "Build New Distributed Histogram Data Frames",
    "text": "Build New Distributed Histogram Data Frames\n\n\nFunction for calculating values for each bin of distributed histogram\n# function to calculate the contributions to neighboring bins\ncalculate_bin_contributions &lt;- function(angle, magnitude, num_bins) {\n  bin_width &lt;- 180 / num_bins\n  contributions &lt;- numeric(num_bins)\n  \n  # get the central bin\n  central_bin &lt;- floor(angle / bin_width) %% num_bins\n  next_bin &lt;- (central_bin + 1) %% num_bins\n  \n  # get contributions to neighboring bins\n  weight &lt;- (1 - abs((angle %% bin_width) / bin_width)) * magnitude\n  \n  contributions[central_bin + 1] &lt;- weight\n  contributions[next_bin + 1] &lt;- magnitude - weight\n  \n  return(list(contributions[1],\n         contributions[2],\n         contributions[3],\n         contributions[4],\n         contributions[5],\n         contributions[6],\n         contributions[7],\n         contributions[8],\n         contributions[9])\n         )\n}\n\n\n\n\nFilter each data set of aerial image gradients and angles to only contain observations with magnitudes greater than or equal to the respective magnitude levels determined above\n# Create filtered data frames using the filter levels for magnitudes defined above, store all in a list\nfiltered_aerial_standard_df_list &lt;-list(sf_hog_df %&gt;%\n                                   filter(mag &gt;= sf_mag_filter),\n                                 salt_lake_hog_df %&gt;%\n                                   filter(mag &gt;= salt_lake_mag_filter), \n                                 detroit_hog_df %&gt;%\n                                   filter(mag &gt;= detroit_mag_filter))\n\n\n\n\nFor each image calculate the contribution to each bin for the disttribued histogram\n# empty list for storing new distributed histogram data frames\naerial_contribution_df_list &lt;- list()\n\n# Define the number of bins\nnum_bins &lt;- 9\n \n# iterate through each filtered standard data frame\nfor (i in 1:length(filtered_aerial_standard_df_list)){\n  \n  aerial_contribution_hog_df &lt;- \n    filtered_aerial_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n  # rearrange into same tidy format\n  aerial_split_histo_df &lt;- \n    aerial_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\", \n                 values_to = \"contribution\", \n                 cols = 4:ncol(aerial_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n  \n  # add to list for storage\n  aerial_contribution_df_list[[i]] &lt;- aerial_split_histo_df\n\n}",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#generate-polar-plots-for-images-using-standard-histogram-binning-technique",
    "href": "aerial_images_results.html#generate-polar-plots-for-images-using-standard-histogram-binning-technique",
    "title": "4  Aerial Cityscapes",
    "section": "Generate Polar Plots for Images Using Standard Histogram Binning Technique",
    "text": "Generate Polar Plots for Images Using Standard Histogram Binning Technique\n\n\nPolar plot of San Francisco, CA histogram of gradient angles using standard binning technique\n# SF polar plot\nsf_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of San Francisco, CA Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/sf_standard_polar_plot.jpg\", sf_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPolar plot of Salt Lake City, UT histogram of gradient angles using standard binning technique\n# SLC plot\nsalt_lake_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Salt Lake City, UT Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/salt_lake_standard_polar_plot.jpg\", salt_lake_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPolar plot of Detroit, MI histogram of gradient angles using standard binning technique\n# Detroit plot\ndetroit_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Detroit, MI Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/detroit_standard_polar_plot.jpg\", detroit_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nSave an arranged image of the 3 standard-binned polar plots side-by-side\n# Save to an arranged image\nall_standard_city_plots &lt;- ggpubr::ggarrange(sf_plot, \n                                             salt_lake_plot, \n                                             detroit_plot)\n\nggsave(\"images/plots/aerial_cities/all_standard_polar_plots.jpg\", \n       all_standard_city_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.5: Aerial Cityscape Standard Polar Plots",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#generate-polar-plots-for-images-using-distributed-histogram-binning-technique",
    "href": "aerial_images_results.html#generate-polar-plots-for-images-using-distributed-histogram-binning-technique",
    "title": "4  Aerial Cityscapes",
    "section": "Generate Polar Plots for Images Using Distributed Histogram Binning Technique",
    "text": "Generate Polar Plots for Images Using Distributed Histogram Binning Technique\n\n\nPolar plot of San Francisco, CA histogram of gradient angles using distributed binning technique\n# SF plot\nsf_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[1]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of San Francisco, CA Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/sf_contribution_polar_plot.jpg\", sf_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPolar plot of Salt Lake City, UT histogram of gradient angles using distributed binning technique\n# SLC plot\nsalt_lake_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[2]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Salt Lake City, UT Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/salt_lake_contribution_polar_plot.jpg\", salt_lake_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPolar plot of Detroit, MI histogram of gradient angles using distributed binning technique\n# Detroit plot\ndetroit_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[3]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Detroit, MI Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/detroit_contribution_polar_plot.jpg\", detroit_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nSave an arranged image of the 3 distributed-binned polar plots side-by-side\n# Save to an arranged image\nall_aerial_contribution_plots &lt;- ggpubr::ggarrange(sf_split_plot, \n                                                   salt_lake_split_plot, \n                                                   detroit_split_plot)\n\nggsave(\"images/plots/aerial_cities/all_aerial_contribution_plots.jpg\", \n       all_aerial_contribution_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.6: Aerial Cityscape Distributed Method Polar Plots\n\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco Cityscape\nSalt Lake City Cityscape\nDetroit Cityscape\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nFigure 4.4: Aerial Cityscape Magnitudes and Angles\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html",
    "href": "grass_images_results.html",
    "title": "5  Grass Images",
    "section": "",
    "text": "Load R Packages and Python Libraries\nLoad R Packages\n# Load R Packages\nlibrary(reticulate)\nlibrary(tidyverse)\nlibrary(mapsapi)\nlibrary(mapboxapi)\nlibrary(magick)\nCode\n# Load Python Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage import color\nfrom skimage.transform import resize\nimport math\nfrom skimage.feature import hog\nimport numpy as np",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#collect-hog-features-for-grass-images",
    "href": "grass_images_results.html#collect-hog-features-for-grass-images",
    "title": "5  Grass Images",
    "section": "Collect HOG Features for Grass Images",
    "text": "Collect HOG Features for Grass Images\n\n\nCode\n# List for storing images\nimg_list = []\n\n# Internet Grass Image\nimg_list.append(color.rgb2gray(io.imread(\"images/grass_image2.jpg\")))\n\n# Living Labs Rotated Aerial Grass\nimg_list.append(\n  color.rgb2gray(\n    io.imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\")\n    )\n    )\n\n# Living Labs Grass Close-up\nimg_list.append(\n  color.rgb2gray(\n    io.imread(\"images/living_lab_aerial/LL_zoomed_in_12.jpg\")\n    )\n    )\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n    \n    rescaled_file_path = f\"images/plots/grass/{x}.jpg\"\n    \n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n    \n    # Hard-Code height to 200 pixels\n    height = 200\n    \n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n    \n    # Resize the image\n    resized_img = resize(img, (height, width))\n    \n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n    \n    # plt.figure(figsize=(plot_width, plot_height))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    \n    # list for storing all magnitudes for image[x]\n    mag = []\n    \n    # list for storing all angles for image[x]\n    theta = []\n    \n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 0.662751677852349\nResized Width: 301\nAspect Ratio: 0.4904214559386973\nResized Width: 407\nAspect Ratio: 0.5625\nResized Width: 355\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nLiving Labs Aerial Image\n\n\n\n\n\n\n\nLiving Labs Close-Up Image\n\n\n\n\n\n\nFigure 5.1: Grass Images Rescaled and Converted to Greyscale",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#build-data-frames-for-each-grass-image",
    "href": "grass_images_results.html#build-data-frames-for-each-grass-image",
    "title": "5  Grass Images",
    "section": "Build Data Frames for Each Grass Image",
    "text": "Build Data Frames for Each Grass Image\n\n\nCode\n# Internet grass DF of gradient magnitudes and angles\nmag_internet_grass = np.array(mag_list[0])\ntheta_internet_grass = np.array(theta_list[0])\n\n# Aerial Living Labs DF of gradient magnitudes and angles\nmag_aerial_living_lab = np.array(mag_list[1])\ntheta_aerial_living_lab = np.array(theta_list[1])\n\n# Close-up Living Labs DF of gradient magnitudes and angles\nmag_close_up_living_lab = np.array(mag_list[2])\ntheta_close_up_living_lab = np.array(theta_list[2])",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#extract-gradient-magnitudes-and-angles-from-each-grass-image",
    "href": "grass_images_results.html#extract-gradient-magnitudes-and-angles-from-each-grass-image",
    "title": "5  Grass Images",
    "section": "Extract Gradient Magnitudes and Angles from each Grass Image",
    "text": "Extract Gradient Magnitudes and Angles from each Grass Image\n\n\nCode\n# Save gradient magnitudes of Internet Grass in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/internet_grass_mag.png\", dpi=300)\n\n\n\n\nCode\n# Save gradient magnitudes of Aerial Living Labs in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('Salt Lake City, UT Gradient Magnitudes')\n# plt.imshow(mag_list[1], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/aerial_living_lab_grass_mag.png\", dpi=300)\n\n\n\n\nCode\n# Save gradient magnitudes of Close-Up Living Labs in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('Detroit, MI Gradient Magnitudes')\n# plt.imshow(mag_list[2], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/close_up_living_lab_grass_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass\n\n\n\n\n\n\n\nAerial Living Labs\n\n\n\n\n\n\n\nClose-Up Living Labs\n\n\n\n\n\n\nFigure 5.2: Grass Image Magnitudes",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#create-data-frame-for-each-image",
    "href": "grass_images_results.html#create-data-frame-for-each-image",
    "title": "5  Grass Images",
    "section": "Create Data Frame for Each Image",
    "text": "Create Data Frame for Each Image\n\n\nMake Data Frame for internet grass image magnitudes and angles\n# Internet grass DF\ninternet_grass_hog_df &lt;- data.frame(mag = as.vector(py$mag_internet_grass),\n                              theta = as.vector((py$theta_internet_grass))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nMake Data Frame for aerial Living Labs image magnitudes and angles\n# Aerial Living Labs DF\naerial_living_lab_hog_df &lt;- data.frame(mag = as.vector(py$mag_aerial_living_lab),\n                              theta = as.vector((py$theta_aerial_living_lab))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nMake Data Frame for close-up Living Lab image magnitudes and angles\n# Close-up Living Labs DF\nclose_up_living_lab_hog_df &lt;- data.frame(mag = as.vector(py$mag_close_up_living_lab),\n                              theta = as.vector((py$theta_close_up_living_lab))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nAdd the data frames created above to a list\n# List of all Data frames\ngrass_standard_df_list = list(internet_grass_hog_df,\n                        aerial_living_lab_hog_df, \n                        close_up_living_lab_hog_df)",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-grass-images",
    "href": "grass_images_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-grass-images",
    "title": "5  Grass Images",
    "section": "Create Histograms of Gradient Magnitudes and Angles for Grass Images",
    "text": "Create Histograms of Gradient Magnitudes and Angles for Grass Images\n\n\nPlot histogram of internet grass gradient magnitudes and define the magnitude level for later filtering\n# Internet grass image histogram of gradient mags\ninternet_grass_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[1]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Internet Grass Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Internet grass mag filter\ninternet_grass_mag_filter &lt;- 0.3\n\n# save image\nggsave(\"images/plots/grass/internet_grass_histogram_mag_plot.jpg\", internet_grass_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of internet grass gradient angles\n# Internet grass image histogram of gradient angles\ninternet_grass_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Internet Grass Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/internet_grass_histogram_theta_plot.jpg\", internet_grass_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of aerial Living Labs grass image gradient magnitudes and define the magnitude level for later filtering\n# Aerial Living Labs image histogram of gradient mags\naerial_living_lab_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[2]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Aerial Living Labs Image Histogram of Gradient Magnitudes\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Aerial Living Labs mag filter\naerial_living_lab_mag_filter &lt;- 0.08\n\n# save image\nggsave(\"images/plots/grass/aerial_living_lab_histogram_mag_plot.jpg\", \n       aerial_living_lab_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of aerial Living Labs grass image gradient angles\n# Aerial Living Labs image histogram of gradient angles\naerial_living_lab_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Aerial Living Labs Image Histogram of Gradient Angles\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/aerial_living_lab_histogram_theta_plot.jpg\", \n       aerial_living_lab_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of close-up Living Labs grass image gradient magnitudes and define the magnitude level for later filtering\n# Close-up Living Labs image histogram of gradient mags\nclose_up_living_lab_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[3]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Close-Up Living Labs Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Close-up mag filter\nclose_up_living_lab_mag_filter &lt;- 0.12\n\n# save image\nggsave(\"images/plots/grass/close_up_living_lab_histogram_mag_plot.jpg\", close_up_living_lab_histogram_mag_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPlot histogram of close-up Living Labs grass image gradient angles\n# Close-up Living Labs image histogram of gradient angles\nclose_up_living_lab_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Close-Up Living Labs Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/close_up_living_lab_histogram_theta_plot.jpg\", close_up_living_lab_histogram_theta_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\n\n\n\n\n\n \n\n\n \n\n\n \n\n\n\n\nFigure 5.3: Grass Image Magnitudes and Angles",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#build-new-distributed-histogram-data-frames-for-grass-images",
    "href": "grass_images_results.html#build-new-distributed-histogram-data-frames-for-grass-images",
    "title": "5  Grass Images",
    "section": "Build New Distributed Histogram Data Frames for Grass Images",
    "text": "Build New Distributed Histogram Data Frames for Grass Images\n\n\nFunction for calculating values for each bin of distributed histogram\ncalculate_bin_contributions &lt;- function(angle, magnitude, num_bins) {\n  bin_width &lt;- 180 / num_bins\n  contributions &lt;- numeric(num_bins)\n  \n  # get the central bin\n  central_bin &lt;- floor(angle / bin_width) %% num_bins\n  next_bin &lt;- (central_bin + 1) %% num_bins\n  \n  # get contributions to neighboring bins\n  weight &lt;- (1 - abs((angle %% bin_width) / bin_width)) * magnitude\n  \n  contributions[central_bin + 1] &lt;- weight\n  contributions[next_bin + 1] &lt;- magnitude - weight\n  \n  return(list(contributions[1],\n         contributions[2],\n         contributions[3],\n         contributions[4],\n         contributions[5],\n         contributions[6],\n         contributions[7],\n         contributions[8],\n         contributions[9])\n         )\n}\n\n\n\n\nFilter each data set of grass image gradients and angles to only contain observations with magnitudes greater than or equal to the respective magnitude levels determined above\n# Create filtered data frames using the filter levels for magnitudes defined above, store all in a list\nfiltered_grass_standard_df_list &lt;-list(internet_grass_hog_df %&gt;%\n                                          filter(mag &gt;= internet_grass_mag_filter),\n                                        aerial_living_lab_hog_df %&gt;%\n                                          filter(mag &gt;= aerial_living_lab_mag_filter), \n                                        close_up_living_lab_hog_df %&gt;%\n                                          filter(mag &gt;= close_up_living_lab_mag_filter))\n\n\n\n\nFor each image calculate the contribution to each bin for the distribued histogram\n# empty list for storing new distributed histogram data frames\ngrass_contribution_df_list &lt;- list()\n\n# Define the number of bins\nnum_bins &lt;- 9\n\n# iterate through each filtered standard data frame\nfor (i in 1:length(filtered_grass_standard_df_list)){\n  \n  grass_contribution_hog_df &lt;- \n    filtered_grass_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n    # rearrange into same tidy format\n  grass_split_histo_df &lt;- \n    grass_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\", \n                 values_to = \"contribution\", \n                 cols = 4:ncol(grass_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n  \n  # add to list for storage\n  grass_contribution_df_list[[i]] &lt;- grass_split_histo_df\n\n}",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#generate-polar-plots-for-images-using-standard-histogram-binning-technique",
    "href": "grass_images_results.html#generate-polar-plots-for-images-using-standard-histogram-binning-technique",
    "title": "5  Grass Images",
    "section": "Generate Polar Plots for Images Using Standard Histogram Binning Technique",
    "text": "Generate Polar Plots for Images Using Standard Histogram Binning Technique\n\n\nPolar plot of internet grass histogram of gradient angles using standard binning technique\n# Internet grass plot\ninternet_grass_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Internet Grass Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/internet_grass_standard_polar_plot.jpg\", internet_grass_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPolar plot of aerial Living Labs histogram of gradient angles using standard binning technique\n# Aerial Living Labs plot\naerial_living_lab_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Aerial Living Labs Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/aerial_living_lab_standard_polar_plot.jpg\", aerial_living_lab_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPolar plot of close-up Living Labs histogram of gradient angles using standard binning technique\n# Close-up Living Labs plot\nclose_up_living_lab_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Close-Up Living Lab Image\\nUsing Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/close_up_living_lab_standard_polar_plot.jpg\", close_up_living_lab_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nSave an arranged image of the 3 plots side-by-side\n# Save to an arranged image\nall_standard_grass_plots &lt;- ggpubr::ggarrange(internet_grass_plot, \n                                             aerial_living_lab_plot, \n                                             close_up_living_lab_plot)\n\nggsave(\"images/plots/grass/all_grass_standard_polar_plots.jpg\", \n       all_standard_grass_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nAerial Living Labs Image\n\n\n\n\n\n\n\nClose-Up Living Labs Image\n\n\n\n\n\n\nFigure 5.4: Aerial Cityscape Standard Polar Plots",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#generate-polar-plots-for-images-using-distributed-histogram-binning-technique",
    "href": "grass_images_results.html#generate-polar-plots-for-images-using-distributed-histogram-binning-technique",
    "title": "5  Grass Images",
    "section": "Generate Polar Plots for Images Using Distributed Histogram Binning Technique",
    "text": "Generate Polar Plots for Images Using Distributed Histogram Binning Technique\n\n\nPolar plot of internet grass histogram of gradient angles using distributed binning technique\n# Internet grass plot\ninternet_grass_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[1]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Internet Grass Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/internet_grass_contribution_polar_plot.jpg\", internet_grass_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPolar plot of aerial Living Labs histogram of gradient angles using distributed binning technique\n# Aerial Living Labs plot\naerial_living_lab_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[2]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Aerial Living Lab Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/aerial_living_lab_contribution_polar_plot.jpg\", aerial_living_lab_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nPolar plot of close-up Living Labs histogram of gradient angles using distributed binning technique\n# Close-up Living Labs plot\nclose_up_living_lab_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[3]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Close-Up Living Lab Image\\nUsing Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/close_up_living_lab_contribution_polar_plot.jpg\", close_up_living_lab_split_plot, width = 6, height = 4, dpi = 300)\n\n\n\n\nSave an arranged image of the 3 distributed-binned polar plots side-by-side\n# Save to an arranged image\nall_grass_contribution_plots &lt;- ggpubr::ggarrange(internet_grass_split_plot, \n                                                  aerial_living_lab_split_plot, \n                                                  close_up_living_lab_split_plot)\n\nggsave(\"images/plots/grass/all_grass_contribution_plots.jpg\", \n       all_grass_contribution_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nAerial Living Labs Image\n\n\n\n\n\n\n\nClose-Up Living Labs Grass Image\n\n\n\n\n\n\nFigure 5.5: Distributed Method Polar Plots for Grass Images\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\nLiving Labs Aerial Image\nLiving Labs Close-Up Image\nInternet Grass\nAerial Living Labs\nClose-Up Living Labs\nFigure 5.3: Grass Image Magnitudes and Angles\nFigure 5.3: Grass Image Magnitudes and Angles\nFigure 5.3: Grass Image Magnitudes and Angles\nFigure 5.3: Grass Image Magnitudes and Angles\nFigure 5.3: Grass Image Magnitudes and Angles\nFigure 5.3: Grass Image Magnitudes and Angles\nInternet Grass Image\nAerial Living Labs Image\nClose-Up Living Labs Image\nInternet Grass Image\nAerial Living Labs Image\nClose-Up Living Labs Grass Image",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html",
    "href": "backflip_image_results.html",
    "title": "6  Backflip Image",
    "section": "",
    "text": "Load R Packages and Python Libraries\nLoad R Packages\n# Load R Packages\nlibrary(reticulate)\nlibrary(tidyverse)\nlibrary(mapsapi)\nlibrary(mapboxapi)\nlibrary(magick)\nCode\n# Load Python Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage import color\nfrom skimage.transform import resize\nimport math\nfrom skimage.feature import hog\nimport numpy as np",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#collect-hog-features-for-backflip-image",
    "href": "backflip_image_results.html#collect-hog-features-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Collect HOG Features for Backflip Image",
    "text": "Collect HOG Features for Backflip Image\n\n\nCode\n# List for storing images\nimg_list = []\n\n# SF aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/TitusFlip.jpg\")))\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n\n    rescaled_file_path = f\"images/plots/backflip/{x}.jpg\"\n\n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n\n    # Hard-Code height to 200 pixels\n    height = 200\n\n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n\n    # Resize the image\n    resized_img = resize(img, (height, width))\n\n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n\n    # plt.figure(figsize=(15, 8))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    # list for storing all magnitudes for image[x]\n    mag = []\n\n    # list for storing all angles for image[x]\n    theta = []\n\n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 1.25\nResized Width: 160\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip\n\n\n\n\n\n\nFigure 6.1: Skiing Backflip Image Rescaled and Converted to Greyscale",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#extract-gradient-magnitudes-and-angles-from-backflip-image",
    "href": "backflip_image_results.html#extract-gradient-magnitudes-and-angles-from-backflip-image",
    "title": "6  Backflip Image",
    "section": "Extract Gradient Magnitudes and Angles from Backflip Image",
    "text": "Extract Gradient Magnitudes and Angles from Backflip Image\n\n\nCode\n# DF of gradient magnitudes and angles\nmag_flip = np.array(mag_list[0])\ntheta_flip = np.array(theta_list[0])",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#plot-magnitudes-as-image-for-backflip-image",
    "href": "backflip_image_results.html#plot-magnitudes-as-image-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Plot Magnitudes as Image for Backflip Image",
    "text": "Plot Magnitudes as Image for Backflip Image\n\n\nCode\n# Save gradient magnitudes of backflip in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/backflip/backflip_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip Image\n\n\n\n\n\n\nFigure 6.2: Skiing Backflip Cityscape Magnitudes as Image",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#create-data-frame-for-backflip-image",
    "href": "backflip_image_results.html#create-data-frame-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Create Data Frame for Backflip Image",
    "text": "Create Data Frame for Backflip Image\n\n\nMake Data Frame for backflip image magnitudes and angles and store it in a list\n# Flip DF\nbackflip_hog_df &lt;- data.frame(mag = as.vector(py$mag_flip),\n                              theta = as.vector((py$theta_flip))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# Add to list\nflip_standard_df_list = list(backflip_hog_df)",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-backflip-image",
    "href": "backflip_image_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Create Histograms of Gradient Magnitudes and Angles for Backflip Image",
    "text": "Create Histograms of Gradient Magnitudes and Angles for Backflip Image\n\n\nPlot histogram of backflip image gradient magnitudes and define the magnitude level for later filtering\n# backflip histogram of gradient mags\nflip_histogram_mag_plot &lt;-\n  ggplot(flip_standard_df_list[[1]],\n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() +\n  labs(x = \"Gradient Magnitude\",\n       y = \"Count\",\n       title = \"Skiing Backflip Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# flip magn filter level\nflip_mag_filter &lt;- 0.2\n\n# save image\nggsave(\"images/plots/backflip/backflip_histogram_mag_plot.jpg\", \n       flip_histogram_mag_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of backflip image gradient angles\n# backflip histogram of gradient angles\nflip_histogram_theta_plot &lt;-\n  ggplot(flip_standard_df_list[[1]],\n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() +\n  labs(x = \"Gradient Angle\",\n       y = \"Count\",\n       title = \"Skiing Backflip Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/backflip/backflip_histogram_theta_plot.jpg\", \n       flip_histogram_theta_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip Histogram of Gradient Magnitudes\n\n\n\n\n\n\n\nSkiing Backflip Histogram of Gradient Angles\n\n\n\n\n\n\nFigure 6.3: Skiing Backflip Magnitudes and Angles",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#build-new-distributed-histogram-data-frame-for-backflip-image",
    "href": "backflip_image_results.html#build-new-distributed-histogram-data-frame-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Build New Distributed Histogram Data Frame for Backflip Image",
    "text": "Build New Distributed Histogram Data Frame for Backflip Image\n\n\nFunction for calculating values for each bin of distributed histogram\n# function to calculate the contributions to neighboring bins\ncalculate_bin_contributions &lt;- function(angle, magnitude, num_bins) {\n  bin_width &lt;- 180 / num_bins\n  contributions &lt;- numeric(num_bins)\n  \n  # get the central bin\n  central_bin &lt;- floor(angle / bin_width) %% num_bins\n  next_bin &lt;- (central_bin + 1) %% num_bins\n  \n  # get contributions to neighboring bins\n  weight &lt;- (1 - abs((angle %% bin_width) / bin_width)) * magnitude\n  \n  contributions[central_bin + 1] &lt;- weight\n  contributions[next_bin + 1] &lt;- magnitude - weight\n  \n  return(list(contributions[1],\n         contributions[2],\n         contributions[3],\n         contributions[4],\n         contributions[5],\n         contributions[6],\n         contributions[7],\n         contributions[8],\n         contributions[9])\n         )\n}\n\n\n\n\nFilter data frame of gradients and angles to only contain observations with magnitudes greater than or equal to the respective magnitude levels determined above\n# Create filtered data frames using the filter level \n# for magnitudes defined above, store in a list\nfiltered_flip_standard_df_list &lt;-\n  list(backflip_hog_df %&gt;%\n         filter(mag &gt;= flip_mag_filter))\n\n\n\n\nCalculate the contribution to each bin for the distribued histogram\n# Define the number of bins\nnum_bins &lt;- 9\nflip_contribution_df_list &lt;- list()\n\n# iterate through each filtered standard data frame (only 1 in this case)\nfor (i in 1:length(filtered_flip_standard_df_list)){\n\n  flip_contribution_hog_df &lt;-\n    filtered_flip_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n  # rearrange into same tidy format\n  flip_split_histo_df &lt;-\n    flip_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\",\n                 values_to = \"contribution\",\n                 cols = 4:ncol(flip_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n\n  # add to list for storage\n  flip_contribution_df_list[[i]] &lt;- flip_split_histo_df\n\n}",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#generate-polar-plots-for-standard-historgrams-for-backflip-image",
    "href": "backflip_image_results.html#generate-polar-plots-for-standard-historgrams-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Generate Polar Plots for Standard Historgrams for Backflip Image",
    "text": "Generate Polar Plots for Standard Historgrams for Backflip Image\n\n\nPolar plot of backflip image histogram of gradient angles using standard binning technique\n# backflip plot\nflip_plot &lt;-\n  ggplot(filtered_flip_standard_df_list[[1]],\n         aes(x = theta)) +\n  geom_histogram(colour = \"black\",\n                 fill = \"lightblue\",\n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\",\n    start = 0,\n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315),\n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Skiing Backflip Image\\n\n       Using Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/backflip/backflip_standard_polar_plot.jpg\", \n       flip_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#generate-polar-plots-for-distributed-historgrams-of-diagonal-image",
    "href": "backflip_image_results.html#generate-polar-plots-for-distributed-historgrams-of-diagonal-image",
    "title": "6  Backflip Image",
    "section": "Generate Polar Plots for Distributed Historgrams of Diagonal Image",
    "text": "Generate Polar Plots for Distributed Historgrams of Diagonal Image\n\n\nPolar plot of backflip image histogram of gradient angles using distributed binning technique\n# backflip plot\nflip_split_plot &lt;-\n  ggplot(flip_contribution_df_list[[1]],\n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\",\n                 fill = \"lightblue\",\n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\",\n    start = 0,\n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315),\n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Skiing Backflip Image\\n\n       Using Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/backflip/backflip_contribution_polar_plot.jpg\", \n       flip_split_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip Image Standard HOG Method\n\n\n\n\n\n\n\nSkiing Backflip Image Distributed HOG Method\n\n\n\n\n\n\nFigure 6.4: Skiing Backflip Image Distributed Method Polar Plot\n\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip\nSkiing Backflip Image\nSkiing Backflip Histogram of Gradient Magnitudes\nSkiing Backflip Histogram of Gradient Angles\nSkiing Backflip Image Standard HOG Method\nSkiing Backflip Image Distributed HOG Method",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  }
]