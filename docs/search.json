[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applying the Histogram of Oriented Gradients Algorithm for Detecting Grass Lay Direction",
    "section": "",
    "text": "References",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Abstract</span>"
    ]
  },
  {
    "objectID": "index.html#references",
    "href": "index.html#references",
    "title": "Applying the Histogram of Oriented Gradients Algorithm for Detecting Grass Lay Direction",
    "section": "",
    "text": "Kimmerer, Robin Wall. 2020. Braiding Sweetgrass: Indigenous Wisdom, Scientific Knowledge, and the Teachings of Plants. Milkweed Editions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Abstract</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "To evaluate the algorithm’s performance, we collected images with varying levels of complexity. Beginning with basic geometric shapes and diagonal lines sourced from Google Images, we established a foundational data set for initial testing. We incorporated aerial cityscapes including San Francisco, Salt Lake City, and Detroit from Mapbox, aiming to assess the algorithm’s ability in identifying urban grid structures such as streets and highways. Additionally, we included images of grass sourced from both Google Images and Dr. Jon Rosales (Environmental Studies) at St. Lawrence University’s Living Lab. The images sourced from the Living Laboratory included aerial and close-up shots, with special attention given to aerial images which featured a northern indicator line. To ensure consistent orientation, each aerial image was manually rotated to align north facing direction upwards before analysis, with the northern indicator subsequently removed to avoid introducing artificial lines in the image.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Diagonal Lines\n\n\n\n\n\n\n\n\n\n\n\n(b) Downtown San Francisco, CA\n\n\n\n\n\n\n\n\n\n\n\n(c) Aerial Grass Image(St. Lawrence University Living Laboratory)\n\n\n\n\n\n\n\n\n\n\n\n(d) Skiing Backflip(St. Lawrence University)\n\n\n\n\n\n\n\nFigure 2.1: Sample of Images for Evaluation\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2.1 (a): Diagonal Lines\nFigure 2.1 (b): Downtown San Francisco, CA\nFigure 2.1 (c): Aerial Grass Image(St. Lawrence University Living Laboratory)\nFigure 2.1 (d): Skiing Backflip(St. Lawrence University)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "methods.html#references",
    "href": "methods.html#references",
    "title": "3  Methods",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\n\n\n\n\nFigure 3.1 (a): Colored Image with Diagonal Lines\nFigure 3.2 (a): Gradient Magnitudes of Diagonal Lines Image\nStandard Technique\nDistributed Technique\nHistograms of Gradient Magnitudes\nHistograms of Gradient Angles\nPolar Plot Using Standard Histogram Technique\nPolar Plot Using Distributed Histogram Technique\n\n\n\nDalal, N., and B. Triggs. 2005. “Histograms of Oriented Gradients for Human Detection.” In 2005 IEEE Computer Society Conference on Computer Vision and Pattern Recognition (CVPR’05), 1:886–893 vol. 1. https://doi.org/10.1109/CVPR.2005.177.\n\n\nSingh, Aishwarya. 2024. “Feature Engineering for Images: A Valuable Introduction to the Hog Feature Descriptor.” Analytics Vidhya. https://www.analyticsvidhya.com/blog/2019/09/feature-engineering-images-introduction-hog-feature-descriptor/.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Methods</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html",
    "href": "aerial_images_results.html",
    "title": "4  Aerial Cityscapes",
    "section": "",
    "text": "Motivation\nDownload aerial cityscape images from Mapbox’s API of San Francisco, Salt Lake City, and Detroit to determine if the HOG algorithm is capable of identifying dominant angles of each city’s grid layout.",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#load-r-packages-and-python-libraries",
    "href": "aerial_images_results.html#load-r-packages-and-python-libraries",
    "title": "4  Aerial Cityscapes",
    "section": "Load R Packages and Python Libraries",
    "text": "Load R Packages and Python Libraries\n\n\nLoad R Packages\n# Load R Packages\nlibrary(reticulate)\nlibrary(tidyverse)\nlibrary(mapsapi)\nlibrary(mapboxapi)\nlibrary(magick)\n\n\n\n\nCode\n# Load Python Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage import color\nfrom skimage.transform import resize\nimport math\nfrom skimage.feature import hog\nimport numpy as np",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#download-aerial-city-images-from-mapbox",
    "href": "aerial_images_results.html#download-aerial-city-images-from-mapbox",
    "title": "4  Aerial Cityscapes",
    "section": "Download Aerial City Images from Mapbox",
    "text": "Download Aerial City Images from Mapbox\n\n\nRead in Mapbox Key from System Enviroment\n# Get Mapbox token from System Environment \nkey &lt;- Sys.getenv(\"mapbox_key\") \n\n\n\n\nDownload map of San Francisco, CA\n# Download map of San Francisco, CA\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 300,\n  height = 200, \n  image = T, latitude = 37.792004, longitude = -122.428079, zoom = 12\n)\n\nmagick::image_write(map, \"images/san_francisco_scale_zoom_12.png\")\n\n\n\n\nDownload map of Salt Lake City, UT\n# Download map of Salt Lake City, UT\npoints_of_interest &lt;- tibble::tibble(\n  longitude = c(-112.065945, -111.853948, \n                -111.852956, -112.023371),\n  \n  latitude = c(40.794275, 40.791516, \n               40.502308, 40.502308)\n  )\n\nprepped_pois &lt;- prep_overlay_markers(\n  data = points_of_interest,\n  marker_type = \"pin-l\",\n  label = 1:4,\n  color = \"#fff\", \n)\n\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 800,\n  height = 1200, \n  image = T, \n  latitude = 40.7,\n  longitude = -111.876183, zoom = 12\n)\n\nmagick::image_write(map, \"images/salt_lake_city_zoom_12.png\")\n\n\n\n\nDownload map of Detroit, MI\n# Download map of Detroit, MI\nmap &lt;- static_mapbox(\n  access_token = key,\n  style_url = \"mapbox://styles/mapbox/satellite-v9\",\n  width = 1200,\n  height = 800, \n  image = T, \n  latitude = 42.336322,\n  longitude = -83.048705, zoom = 12\n)\n\nmagick::image_write(map, \"images/detroit_zoom_12.png\")\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco Cityscape\n\n\n\n\n\n\n\nSalt Lake City Cityscape\n\n\n\n\n\n\n\nDetroit Cityscape\n\n\n\n\n\n\nFigure 4.1: Aerial Cityscape Images",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#collect-hog-features-for-aerial-cityscapes",
    "href": "aerial_images_results.html#collect-hog-features-for-aerial-cityscapes",
    "title": "4  Aerial Cityscapes",
    "section": "Collect HOG Features for Aerial Cityscapes",
    "text": "Collect HOG Features for Aerial Cityscapes\n\n\nCode\n# List for storing images\nimg_list = []\n\n# SF aerial\nimg_list.append(color.rgb2gray(\n  io.imread(\"images/san_francisco_scale_zoom_12.png\")))\n\n# Salt Lake City Aerial\nimg_list.append(color.rgb2gray(\n  io.imread(\"images/salt_lake_city_zoom_12.png\")))\n\n# Detroit Aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/detroit_zoom_12.png\")))\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n    \n    rescaled_file_path = f\"images/plots/aerial_cities/{x}.jpg\"\n    \n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n    \n    # Hard-Code height to 200 pixels\n    height = 200\n    \n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n    \n    # Resize the image\n    resized_img = resize(img, (height, width))\n    \n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n    \n    # if (x == 1):\n    #   plot_width = 8\n    #   plot_height = 15\n    # else:\n    #   plot_width = 15\n    #   plot_height = 9\n    # \n    # plt.figure(figsize=(plot_width, plot_height))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    \n    # list for storing all magnitudes for image[x]\n    mag = []\n    \n    # list for storing all angles for image[x]\n    theta = []\n    \n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 0.6666666666666666\nResized Width: 300\nAspect Ratio: 1.5\nResized Width: 133\nAspect Ratio: 0.6666666666666666\nResized Width: 300\n\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.2: Aerial Cityscape Images Re-scaled and Converted to Grayscale",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#extract-gradient-magnitudes-and-angles-from-each-aerial-cityscape",
    "href": "aerial_images_results.html#extract-gradient-magnitudes-and-angles-from-each-aerial-cityscape",
    "title": "4  Aerial Cityscapes",
    "section": "Extract Gradient Magnitudes and Angles from each Aerial Cityscape",
    "text": "Extract Gradient Magnitudes and Angles from each Aerial Cityscape\n\n\nCode\n# San Francisco DF of gradient magnitudes and angles\nmag_sf = np.array(mag_list[0])\ntheta_sf = np.array(theta_list[0])\n\n# Salt Lake City DF of gradient magnitudes and angles\nmag_salt_lake = np.array(mag_list[1])\ntheta_salt_lake = np.array(theta_list[1])\n\n# Detorit DF of gradient magnitudes and angles\nmag_detroit = np.array(mag_list[2])\ntheta_detroit = np.array(theta_list[2])",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#plot-gradient-magnitudes-as-image-for-each-aerial-cityscape",
    "href": "aerial_images_results.html#plot-gradient-magnitudes-as-image-for-each-aerial-cityscape",
    "title": "4  Aerial Cityscapes",
    "section": "Plot Gradient Magnitudes as Image for each Aerial Cityscape",
    "text": "Plot Gradient Magnitudes as Image for each Aerial Cityscape\n\n\nCode\n# Save gradient magnitudes of San Francisco in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/sf_mag.png\", dpi=300)\n\n\n\n\nCode\n# Save gradient magnitudes of Salt Lake City in image form\n\n# plt.figure(figsize=(8, 15))\n# #plt.title('Salt Lake City, UT Gradient Magnitudes')\n# plt.imshow(mag_list[1], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/salt_lake_mag.png\", dpi=300)\n\n\n\n\nCode\n# Save gradient magnitudes of Detroit in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('Detroit, MI Gradient Magnitudes')\n# plt.imshow(mag_list[2], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/aerial_cities/detroit_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.3: Image of Aerial Cityscape Magnitudes",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#create-data-frame-for-each-image",
    "href": "aerial_images_results.html#create-data-frame-for-each-image",
    "title": "4  Aerial Cityscapes",
    "section": "Create Data Frame for Each Image",
    "text": "Create Data Frame for Each Image\n\n\nMake data frame of San Francisco, CA magnitudes and angles\n# San Francisco DF\nsf_hog_df &lt;- data.frame(mag = as.vector(py$mag_sf),\n                              theta = as.vector((py$theta_sf))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nMake Data Frame of Salt Lake City, UT Magnitudes and Angles\n# Salt Lake City DF\nsalt_lake_hog_df &lt;- data.frame(mag = as.vector(py$mag_salt_lake),\n                              theta = as.vector((py$theta_salt_lake))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nMake Data Frame of Detroit, MI Magnitudes and Angles\n# Detroit DF\ndetroit_hog_df &lt;- data.frame(mag = as.vector(py$mag_detroit),\n                              theta = as.vector((py$theta_detroit))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nAdd the Data Frames Created Above to a List\n# List of all Data frames\nstandard_df_list = list(sf_hog_df,\n                        salt_lake_hog_df, \n                        detroit_hog_df)",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-aerial-cityscapes",
    "href": "aerial_images_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-aerial-cityscapes",
    "title": "4  Aerial Cityscapes",
    "section": "Create Histograms of Gradient Magnitudes and Angles for Aerial Cityscapes",
    "text": "Create Histograms of Gradient Magnitudes and Angles for Aerial Cityscapes\n\n\nPlot histogram of San Francisco, CA gradient magnitudes and define the magnitude level for later filtering\n# SF histogram of gradient mags\nsf_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[1]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"San Francisco Cityscape Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# sf mag filter level\nsf_mag_filter &lt;- 0.4\n\n# save image\nggsave(\"images/plots/aerial_cities/sf_histogram_mag_plot.jpg\", \n       sf_histogram_mag_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of San Francisco, CA gradient angles\n# SF histogram of gradient angles\nsf_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"San Francisco Cityscape Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/sf_histogram_theta_plot.jpg\", \n       sf_histogram_theta_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of Salt Lake City, UT gradient magnitudes and define the magnitude level for later filtering\n# slc histogram of gradient mags\nsalt_lake_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[2]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Salt Lake City Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# SLC mag filter level\nsalt_lake_mag_filter &lt;- 0.12\n\n# save image\nggsave(\"images/plots/aerial_cities/salt_lake_histogram_mag_plot.jpg\", \n       salt_lake_histogram_mag_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of Salt Lake City, UT gradient angles\n# slc histogram of gradient angles\nsalt_lake_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Salt Lake City Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/salt_lake_histogram_theta_plot.jpg\",\n       salt_lake_histogram_theta_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of Detroit, MI gradient magnitudes and define the magnitude level for later filtering\n# Detroit histogram of gradient mags\ndetroit_histogram_mag_plot &lt;-\n  ggplot(standard_df_list[[3]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Detroit Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Detroit mag filter level\ndetroit_mag_filter &lt;- 0.15\n\nggsave(\"images/plots/aerial_cities/detroit_histogram_mag_plot.jpg\", \n       detroit_histogram_mag_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of Detroit, MI gradient angles\n# Detroit histogram of gradient angles\ndetroit_histogram_theta_plot &lt;-\n  ggplot(standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Detroit, MI Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/detroit_histogram_theta_plot.jpg\", \n       detroit_histogram_theta_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA Gradient Magnitudes\n\n\n\n\n\n\n\nSalt Lake City, UT Gradient Magnitudes\n\n\n\n\n\n\n\nDetroit, MI Gradient Magnitudes\n\n\n\n\n\n\n\n\n\nSan Francisco, CA Gradient Angles\n\n\n\n\n\n\n\nSalt Lake City, UT Gradient Angles\n\n\n\n\n\n\n\nDetroit, MI Gradient Angles\n\n\n\n\n\n\nFigure 4.4: Aerial Cityscape Histograms of Magnitudes and Angles",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#build-new-distributed-histogram-data-frames",
    "href": "aerial_images_results.html#build-new-distributed-histogram-data-frames",
    "title": "4  Aerial Cityscapes",
    "section": "Build New Distributed Histogram Data Frames",
    "text": "Build New Distributed Histogram Data Frames\n\n\nFunction for calculating values for each bin of distributed histogram\n# function to calculate the contributions to neighboring bins\ncalculate_bin_contributions &lt;- function(angle, magnitude, num_bins) {\n  bin_width &lt;- 180 / num_bins\n  contributions &lt;- numeric(num_bins)\n  \n  # get the central bin\n  central_bin &lt;- floor(angle / bin_width) %% num_bins\n  next_bin &lt;- (central_bin + 1) %% num_bins\n  \n  # get contributions to neighboring bins\n  weight &lt;- (1 - abs((angle %% bin_width) / bin_width)) * magnitude\n  \n  contributions[central_bin + 1] &lt;- weight\n  contributions[next_bin + 1] &lt;- magnitude - weight\n  \n  return(list(contributions[1],\n         contributions[2],\n         contributions[3],\n         contributions[4],\n         contributions[5],\n         contributions[6],\n         contributions[7],\n         contributions[8],\n         contributions[9])\n         )\n}\n\n\n\n\nFilter each data set of aerial image gradients and angles to only contain observations with magnitudes greater than or equal to the respective magnitude levels determined above\n# Create filtered data frames using the filter levels \n# for magnitudes defined above, store all in a list\nfiltered_aerial_standard_df_list &lt;-list(sf_hog_df %&gt;%\n                                   filter(mag &gt;= sf_mag_filter),\n                                 salt_lake_hog_df %&gt;%\n                                   filter(mag &gt;= salt_lake_mag_filter), \n                                 detroit_hog_df %&gt;%\n                                   filter(mag &gt;= detroit_mag_filter))\n\n\n\n\nFor each image calculate the contribution to each bin for the disttribued histogram\n# empty list for storing new distributed histogram data frames\naerial_contribution_df_list &lt;- list()\n\n# Define the number of bins\nnum_bins &lt;- 9\n \n# iterate through each filtered standard data frame\nfor (i in 1:length(filtered_aerial_standard_df_list)){\n  \n  aerial_contribution_hog_df &lt;- \n    filtered_aerial_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n  # rearrange into same tidy format\n  aerial_split_histo_df &lt;- \n    aerial_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\", \n                 values_to = \"contribution\", \n                 cols = 4:ncol(aerial_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n  \n  # add to list for storage\n  aerial_contribution_df_list[[i]] &lt;- aerial_split_histo_df\n\n}",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#generate-polar-plots-for-images-using-standard-histogram-binning-technique",
    "href": "aerial_images_results.html#generate-polar-plots-for-images-using-standard-histogram-binning-technique",
    "title": "4  Aerial Cityscapes",
    "section": "Generate Polar Plots for Images Using Standard Histogram Binning Technique",
    "text": "Generate Polar Plots for Images Using Standard Histogram Binning Technique\n\n\nPolar plot of San Francisco, CA histogram of gradient angles using standard binning technique\n# SF polar plot\nsf_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of San Francisco, CA Image\n       Using Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/sf_standard_polar_plot.jpg\", \n       sf_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPolar plot of Salt Lake City, UT histogram of gradient angles using standard binning technique\n# SLC plot\nsalt_lake_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Salt Lake City, UT Image\n       Using Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/salt_lake_standard_polar_plot.jpg\", \n       salt_lake_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPolar plot of Detroit, MI histogram of gradient angles using standard binning technique\n# Detroit plot\ndetroit_plot &lt;-\n  ggplot(filtered_aerial_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Detroit, MI Image\n       Using Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/detroit_standard_polar_plot.jpg\", \n       detroit_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nSave an arranged image of the 3 standard-binned polar plots side-by-side\n# Save to an arranged image\nall_standard_city_plots &lt;- ggpubr::ggarrange(sf_plot, \n                                             salt_lake_plot, \n                                             detroit_plot)\n\nggsave(\"images/plots/aerial_cities/all_standard_polar_plots.jpg\", \n       all_standard_city_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.5: Polar Plots using Standard Binning Technique for Aerial Cityscapes",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#generate-polar-plots-for-images-using-distributed-histogram-binning-technique",
    "href": "aerial_images_results.html#generate-polar-plots-for-images-using-distributed-histogram-binning-technique",
    "title": "4  Aerial Cityscapes",
    "section": "Generate Polar Plots for Images Using Distributed Histogram Binning Technique",
    "text": "Generate Polar Plots for Images Using Distributed Histogram Binning Technique\n\n\nPolar plot of San Francisco, CA histogram of gradient angles using distributed binning technique\n# SF plot\nsf_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[1]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of San Francisco, CA Image\n       Using Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/sf_contribution_polar_plot.jpg\", \n       sf_split_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPolar plot of Salt Lake City, UT histogram of gradient angles using distributed binning technique\n# SLC plot\nsalt_lake_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[2]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Salt Lake City, UT Image\n       Using Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/salt_lake_contribution_polar_plot.jpg\", \n       salt_lake_split_plot, \n       width = 6,\n       height = 4, \n       dpi = 300)\n\n\n\n\nPolar plot of Detroit, MI histogram of gradient angles using distributed binning technique\n# Detroit plot\ndetroit_split_plot &lt;-\n  ggplot(aerial_contribution_df_list[[3]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Detroit, MI Image\n       Using Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/aerial_cities/detroit_contribution_polar_plot.jpg\", \n       detroit_split_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nSave an arranged image of the 3 distributed-binned polar plots side-by-side\n# Save to an arranged image\nall_aerial_contribution_plots &lt;- ggpubr::ggarrange(sf_split_plot, \n                                                   salt_lake_split_plot, \n                                                   detroit_split_plot)\n\nggsave(\"images/plots/aerial_cities/all_aerial_contribution_plots.jpg\", \n       all_aerial_contribution_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nSan Francisco, CA\n\n\n\n\n\n\n\nSalt Lake City, UT\n\n\n\n\n\n\n\nDetroit, MI\n\n\n\n\n\n\nFigure 4.6: Polar Plots using Distributed Binning Technique for Aerial Cityscapes",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "aerial_images_results.html#discussion",
    "href": "aerial_images_results.html#discussion",
    "title": "4  Aerial Cityscapes",
    "section": "Discussion",
    "text": "Discussion\n\n\n      The San Francisco image delivered the most promising results due to its closer zoom level compared to the Salt Lake City and Detroit images. Angles in the seventy-degree range emerged as the most frequent, accurately reflecting the slightly diagonal west-east streets of downtown San Francisco. The layout of Salt Lake City significantly influenced the results of its polar plot. With its narrow vertical grid layout, the city exhibited a higher frequency of vertical angles and a smaller yet significant occurrence of horizontal gradient angles. For the images of San Francisco and Detroit, the outcomes between the Standard and Distributed binning techniques exhibited similar results. However, for Salt Lake City, the Distributed technique notably favored a higher frequency of both vertical and horizontal angles.\n\n\n\n\n\n\n\n\n\n\nSan Francisco Cityscape\nSalt Lake City Cityscape\nDetroit Cityscape\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nSan Francisco, CA Gradient Magnitudes\nSalt Lake City, UT Gradient Magnitudes\nDetroit, MI Gradient Magnitudes\nSan Francisco, CA Gradient Angles\nSalt Lake City, UT Gradient Angles\nDetroit, MI Gradient Angles\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI\nSan Francisco, CA\nSalt Lake City, UT\nDetroit, MI",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Aerial Cityscapes</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html",
    "href": "grass_images_results.html",
    "title": "5  Grass Images",
    "section": "",
    "text": "Motivation\nUse images from the internet and St. Lawrence University’s Living Laboratory to determine if the HOG algorithm is capable of identifying dominant angles of grass lay.",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#input-images",
    "href": "grass_images_results.html#input-images",
    "title": "5  Grass Images",
    "section": "Input Images",
    "text": "Input Images\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nLiving Lab Aerial Image\n\n\n\n\n\n\n\nLiving Lab Close-Up Image\n\n\n\n\n\n\nFigure 5.1: Input Grass Images",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#load-r-packages-and-python-libraries",
    "href": "grass_images_results.html#load-r-packages-and-python-libraries",
    "title": "5  Grass Images",
    "section": "Load R Packages and Python Libraries",
    "text": "Load R Packages and Python Libraries\n\n\nLoad R Packages\n# Load R Packages\nlibrary(reticulate)\nlibrary(tidyverse)\nlibrary(mapsapi)\nlibrary(mapboxapi)\nlibrary(magick)\n\n\n\n\nCode\n# Load Python Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage import color\nfrom skimage.transform import resize\nimport math\nfrom skimage.feature import hog\nimport numpy as np",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#collect-hog-features-for-grass-images",
    "href": "grass_images_results.html#collect-hog-features-for-grass-images",
    "title": "5  Grass Images",
    "section": "Collect HOG Features for Grass Images",
    "text": "Collect HOG Features for Grass Images\n\n\nCode\n# List for storing images\nimg_list = []\n\n# Internet Grass Image\nimg_list.append(color.rgb2gray(io.imread(\"images/grass_image2.jpg\")))\n\n# Living Lab Rotated Aerial Grass\nimg_list.append(\n  color.rgb2gray(\n    io.imread(\"images/living_lab_aerial/aerial_grass_living_lab_rotated.jpg\")))\n\n# Living Lab Grass Close-up\nimg_list.append(\n  color.rgb2gray(\n    io.imread(\"images/living_lab_aerial/LL_zoomed_in_12.jpg\")\n    )\n    )\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n    \n    rescaled_file_path = f\"images/plots/grass/{x}.jpg\"\n    \n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n    \n    # Hard-Code height to 200 pixels\n    height = 200\n    \n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n    \n    # Resize the image\n    resized_img = resize(img, (height, width))\n    \n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n    \n    # plt.figure(figsize=(plot_width, plot_height))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    \n    # list for storing all magnitudes for image[x]\n    mag = []\n    \n    # list for storing all angles for image[x]\n    theta = []\n    \n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 0.662751677852349\nResized Width: 301\nAspect Ratio: 0.4904214559386973\nResized Width: 407\nAspect Ratio: 0.5625\nResized Width: 355\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nLiving Lab Aerial Image\n\n\n\n\n\n\n\nLiving Lab Close-Up Image\n\n\n\n\n\n\nFigure 5.2: Grass Images Re-Scaled and Converted to Grayscale",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#extract-gradient-magnitudes-and-angles-from-each-grass-image",
    "href": "grass_images_results.html#extract-gradient-magnitudes-and-angles-from-each-grass-image",
    "title": "5  Grass Images",
    "section": "Extract Gradient Magnitudes and Angles from each Grass Image",
    "text": "Extract Gradient Magnitudes and Angles from each Grass Image\n\n\nCode\n# Internet grass DF of gradient magnitudes and angles\nmag_internet_grass = np.array(mag_list[0])\ntheta_internet_grass = np.array(theta_list[0])\n\n# Aerial Living Lab DF of gradient magnitudes and angles\nmag_aerial_living_lab = np.array(mag_list[1])\ntheta_aerial_living_lab = np.array(theta_list[1])\n\n# Close-up Living Lab DF of gradient magnitudes and angles\nmag_close_up_living_lab = np.array(mag_list[2])\ntheta_close_up_living_lab = np.array(theta_list[2])",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#plot-gradient-magnitudes-as-image-for-each-grass-image",
    "href": "grass_images_results.html#plot-gradient-magnitudes-as-image-for-each-grass-image",
    "title": "5  Grass Images",
    "section": "Plot Gradient Magnitudes as Image for each Grass Image",
    "text": "Plot Gradient Magnitudes as Image for each Grass Image\n\n\nCode\n# Save gradient magnitudes of Internet Grass in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/internet_grass_mag.png\", dpi=300)\n\n\n\n\nCode\n# Save gradient magnitudes of Aerial Living Lab in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('Salt Lake City, UT Gradient Magnitudes')\n# plt.imshow(mag_list[1], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/aerial_living_lab_grass_mag.png\", dpi=300)\n\n\n\n\nCode\n# Save gradient magnitudes of Close-Up Living Lab in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('Detroit, MI Gradient Magnitudes')\n# plt.imshow(mag_list[2], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/grass/close_up_living_lab_grass_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass\n\n\n\n\n\n\n\nAerial Living Lab\n\n\n\n\n\n\n\nClose-Up Living Lab\n\n\n\n\n\n\nFigure 5.3: Grass Image Magnitudes",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#create-data-frame-for-each-image",
    "href": "grass_images_results.html#create-data-frame-for-each-image",
    "title": "5  Grass Images",
    "section": "Create Data Frame for Each Image",
    "text": "Create Data Frame for Each Image\n\n\nMake Data Frame for internet grass image magnitudes and angles\n# Internet grass DF\ninternet_grass_hog_df &lt;- \n  data.frame(mag = as.vector(py$mag_internet_grass),\n             theta = as.vector((py$theta_internet_grass))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nMake Data Frame for aerial Living Lab image magnitudes and angles\n# Aerial Living Lab DF\naerial_living_lab_hog_df &lt;- \n  data.frame(mag = as.vector(py$mag_aerial_living_lab),\n             theta = as.vector((py$theta_aerial_living_lab))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nMake Data Frame for close-up Living Lab image magnitudes and angles\n# Close-up Living Lab DF\nclose_up_living_lab_hog_df &lt;- \n  data.frame(mag = as.vector(py$mag_close_up_living_lab),\n             theta = as.vector((py$theta_close_up_living_lab))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n\n\n\nAdd the data frames created above to a list\n# List of all Data frames\ngrass_standard_df_list = list(internet_grass_hog_df,\n                        aerial_living_lab_hog_df, \n                        close_up_living_lab_hog_df)",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-grass-images",
    "href": "grass_images_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-grass-images",
    "title": "5  Grass Images",
    "section": "Create Histograms of Gradient Magnitudes and Angles for Grass Images",
    "text": "Create Histograms of Gradient Magnitudes and Angles for Grass Images\n\n\nPlot histogram of internet grass gradient magnitudes and define the magnitude level for later filtering\n# Internet grass image histogram of gradient mags\ninternet_grass_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[1]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Internet Grass Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Internet grass mag filter\ninternet_grass_mag_filter &lt;- 0.3\n\n# save image\nggsave(\"images/plots/grass/internet_grass_histogram_mag_plot.jpg\", \n       internet_grass_histogram_mag_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of internet grass gradient angles\n# Internet grass image histogram of gradient angles\ninternet_grass_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Internet Grass Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/internet_grass_histogram_theta_plot.jpg\", \n       internet_grass_histogram_theta_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of aerial Living Lab grass image gradient magnitudes and define the magnitude level for later filtering\n# Aerial Living Lab image histogram of gradient mags\naerial_living_lab_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[2]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Aerial Living Lab Image Histogram of Gradient Magnitudes\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Aerial Living Lab mag filter\naerial_living_lab_mag_filter &lt;- 0.08\n\n# save image\nggsave(\"images/plots/grass/aerial_living_lab_histogram_mag_plot.jpg\", \n       aerial_living_lab_histogram_mag_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of aerial Living Lab grass image gradient angles\n# Aerial Living Lab image histogram of gradient angles\naerial_living_lab_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Aerial Living Lab Image Histogram of Gradient Angles\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/aerial_living_lab_histogram_theta_plot.jpg\", \n       aerial_living_lab_histogram_theta_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of close-up Living Lab grass image gradient magnitudes and define the magnitude level for later filtering\n# Close-up Living Lab image histogram of gradient mags\nclose_up_living_lab_histogram_mag_plot &lt;-\n  ggplot(grass_standard_df_list[[3]], \n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Magnitude\", \n       y = \"Count\", \n       title = \"Close-Up Living Lab Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# Close-up mag filter\nclose_up_living_lab_mag_filter &lt;- 0.12\n\n# save image\nggsave(\"images/plots/grass/close_up_living_lab_histogram_mag_plot.jpg\", \n       close_up_living_lab_histogram_mag_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of close-up Living Lab grass image gradient angles\n# Close-up Living Lab image histogram of gradient angles\nclose_up_living_lab_histogram_theta_plot &lt;-\n  ggplot(grass_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() + \n  labs(x = \"Gradient Angle\", \n       y = \"Count\", \n       title = \"Close-Up Living Lab Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/close_up_living_lab_histogram_theta_plot.jpg\", \n       close_up_living_lab_histogram_theta_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image Gradient Magnitudes\n\n\n\n\n\n\n\nAerial Living Lab Image Gradient Magnitudes\n\n\n\n\n\n\n\nClose-Up Living Lab Image Gradient Magnitudes\n\n\n\n\n\n\n\n\n\nInternet Grass Image Gradient Angles\n\n\n\n\n\n\n\nAerial Living Lab Image Gradient Angles\n\n\n\n\n\n\n\nClose-Up Living Lab Image Gradient Angles\n\n\n\n\n\n\nFigure 5.4: Grass Image Magnitudes and Angles",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#build-new-distributed-histogram-data-frames-for-grass-images",
    "href": "grass_images_results.html#build-new-distributed-histogram-data-frames-for-grass-images",
    "title": "5  Grass Images",
    "section": "Build New Distributed Histogram Data Frames for Grass Images",
    "text": "Build New Distributed Histogram Data Frames for Grass Images\n\n\nFunction for calculating values for each bin of distributed histogram\ncalculate_bin_contributions &lt;- function(angle, magnitude, num_bins) {\n  bin_width &lt;- 180 / num_bins\n  contributions &lt;- numeric(num_bins)\n  \n  # get the central bin\n  central_bin &lt;- floor(angle / bin_width) %% num_bins\n  next_bin &lt;- (central_bin + 1) %% num_bins\n  \n  # get contributions to neighboring bins\n  weight &lt;- (1 - abs((angle %% bin_width) / bin_width)) * magnitude\n  \n  contributions[central_bin + 1] &lt;- weight\n  contributions[next_bin + 1] &lt;- magnitude - weight\n  \n  return(list(contributions[1],\n         contributions[2],\n         contributions[3],\n         contributions[4],\n         contributions[5],\n         contributions[6],\n         contributions[7],\n         contributions[8],\n         contributions[9])\n         )\n}\n\n\n\n\nFilter each data set of grass image gradients and angles to only contain observations with magnitudes greater than or equal to the respective magnitude levels determined above\n# Create filtered data frames using the filter levels for \n# magnitudes defined above, store all in a list\nfiltered_grass_standard_df_list &lt;-\n  list(internet_grass_hog_df %&gt;%\n         filter(mag &gt;= internet_grass_mag_filter),\n       aerial_living_lab_hog_df %&gt;%\n         filter(mag &gt;= aerial_living_lab_mag_filter), \n       close_up_living_lab_hog_df %&gt;%\n         filter(mag &gt;= close_up_living_lab_mag_filter))\n\n\n\n\nFor each image calculate the contribution to each bin for the distribued histogram\n# empty list for storing new distributed histogram data frames\ngrass_contribution_df_list &lt;- list()\n\n# Define the number of bins\nnum_bins &lt;- 9\n\n# iterate through each filtered standard data frame\nfor (i in 1:length(filtered_grass_standard_df_list)){\n  \n  grass_contribution_hog_df &lt;- \n    filtered_grass_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n    # rearrange into same tidy format\n  grass_split_histo_df &lt;- \n    grass_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\", \n                 values_to = \"contribution\", \n                 cols = 4:ncol(grass_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n  \n  # add to list for storage\n  grass_contribution_df_list[[i]] &lt;- grass_split_histo_df\n\n}",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#generate-polar-plots-for-images-using-standard-histogram-binning-technique",
    "href": "grass_images_results.html#generate-polar-plots-for-images-using-standard-histogram-binning-technique",
    "title": "5  Grass Images",
    "section": "Generate Polar Plots for Images Using Standard Histogram Binning Technique",
    "text": "Generate Polar Plots for Images Using Standard Histogram Binning Technique\n\n\nPolar plot of internet grass histogram of gradient angles using standard binning technique\n# Internet grass plot\ninternet_grass_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[1]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Internet Grass Image\n       Using Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/internet_grass_standard_polar_plot.jpg\", \n       internet_grass_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPolar plot of aerial Living Lab histogram of gradient angles using standard binning technique\n# Aerial Living Lab plot\naerial_living_lab_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[2]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Aerial Living Lab Image\n       Using Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/aerial_living_lab_standard_polar_plot.jpg\", \n       aerial_living_lab_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPolar plot of close-up Living Lab histogram of gradient angles using standard binning technique\n# Close-up Living Lab plot\nclose_up_living_lab_plot &lt;-\n  ggplot(filtered_grass_standard_df_list[[3]], \n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Close-Up Living Lab Image\n       Using Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/close_up_living_lab_standard_polar_plot.jpg\", \n       close_up_living_lab_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nSave an arranged image of the 3 plots side-by-side\n# Save to an arranged image\nall_standard_grass_plots &lt;- ggpubr::ggarrange(internet_grass_plot, \n                                             aerial_living_lab_plot, \n                                             close_up_living_lab_plot)\n\nggsave(\"images/plots/grass/all_grass_standard_polar_plots.jpg\", \n       all_standard_grass_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nAerial Living Lab Image\n\n\n\n\n\n\n\nClose-Up Living Lab Image\n\n\n\n\n\n\nFigure 5.5: Polar Plots using Standard Binning Technique for Grass Images",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#generate-polar-plots-for-images-using-distributed-histogram-binning-technique",
    "href": "grass_images_results.html#generate-polar-plots-for-images-using-distributed-histogram-binning-technique",
    "title": "5  Grass Images",
    "section": "Generate Polar Plots for Images Using Distributed Histogram Binning Technique",
    "text": "Generate Polar Plots for Images Using Distributed Histogram Binning Technique\n\n\nPolar plot of internet grass histogram of gradient angles using distributed binning technique\n# Internet grass plot\ninternet_grass_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[1]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Internet Grass Image\n       Using Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/internet_grass_contribution_polar_plot.jpg\", \n       internet_grass_split_plot, \n       width = 6,\n       height = 4, \n       dpi = 300)\n\n\n\n\nPolar plot of aerial Living Lab histogram of gradient angles using distributed binning technique\n# Aerial Living Lab plot\naerial_living_lab_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[2]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Aerial Living Lab Image\n       Using Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/aerial_living_lab_contribution_polar_plot.jpg\", \n       aerial_living_lab_split_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPolar plot of close-up Living Lab histogram of gradient angles using distributed binning technique\n# Close-up Living Lab plot\nclose_up_living_lab_split_plot &lt;-\n  ggplot(grass_contribution_df_list[[3]], \n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\", \n                 fill = \"lightblue\", \n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\", \n    start = 0, \n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315), \n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Close-Up Living Lab Image\n       Using Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/grass/close_up_living_lab_contribution_polar_plot.jpg\", \n       close_up_living_lab_split_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nSave an arranged image of the 3 distributed-binned polar plots side-by-side\n# Save to an arranged image\nall_grass_contribution_plots &lt;- \n  ggpubr::ggarrange(internet_grass_split_plot, \n                    aerial_living_lab_split_plot, \n                    close_up_living_lab_split_plot)\n\nggsave(\"images/plots/grass/all_grass_contribution_plots.jpg\", \n       all_grass_contribution_plots, \n       width = 7, \n       height = 7)\n\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\n\n\n\n\n\n\n\nAerial Living Lab Image\n\n\n\n\n\n\n\nClose-Up Living Lab Grass Image\n\n\n\n\n\n\nFigure 5.6: Polar Plots using Distributed Binning Technique for Grass Images",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "grass_images_results.html#discussion",
    "href": "grass_images_results.html#discussion",
    "title": "5  Grass Images",
    "section": "Discussion",
    "text": "Discussion\n      The internet grass image was selected for its simplicity and general diagonal direction. Both techniques proved quite successful at identifying the image’s predominate diagonal gradient angles. The aerial image from the Living Laboratory posed a greater challenge due to its wider zoom range, causing a higher degree of variability in grass lay direction. Ultimately, the standard binning technique was able to identify this north-eastern trend seen on the right side of the image, while the distributed method identified a slightly more eastern trend. Lastly, the north-eastern trend in close-up image from the Living Laboratory was successfully identified in both the standard and distributed methods of binning.\n\n\n\n\n\n\n\n\n\n\n\nInternet Grass Image\nLiving Lab Aerial Image\nLiving Lab Close-Up Image\nInternet Grass Image\nLiving Lab Aerial Image\nLiving Lab Close-Up Image\nInternet Grass\nAerial Living Lab\nClose-Up Living Lab\nInternet Grass Image Gradient Magnitudes\nAerial Living Lab Image Gradient Magnitudes\nClose-Up Living Lab Image Gradient Magnitudes\nInternet Grass Image Gradient Angles\nAerial Living Lab Image Gradient Angles\nClose-Up Living Lab Image Gradient Angles\nInternet Grass Image\nAerial Living Lab Image\nClose-Up Living Lab Image\nInternet Grass Image\nAerial Living Lab Image\nClose-Up Living Lab Grass Image",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Grass Images</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html",
    "href": "backflip_image_results.html",
    "title": "6  Backflip Image",
    "section": "",
    "text": "Motivation\nTest the HOG algorithm’s ability to identify dominant edges using an image of a skier. This scenario adds complexity with both a skier in the foreground and a crowd in the background, allowing us to observe how the algorithm deals with additional “noise”.",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#input-image",
    "href": "backflip_image_results.html#input-image",
    "title": "6  Backflip Image",
    "section": "Input Image",
    "text": "Input Image\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip Image\n\n\n\n\n\n\nFigure 6.1: Input Image",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#load-r-packages-and-python-libraries",
    "href": "backflip_image_results.html#load-r-packages-and-python-libraries",
    "title": "6  Backflip Image",
    "section": "Load R Packages and Python Libraries",
    "text": "Load R Packages and Python Libraries\n\n\nLoad R Packages\n# Load R Packages\nlibrary(reticulate)\nlibrary(tidyverse)\nlibrary(mapsapi)\nlibrary(mapboxapi)\nlibrary(magick)\n\n\n\n\nCode\n# Load Python Libraries\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom skimage.io import imread, imshow\nfrom skimage.transform import resize\nfrom skimage.feature import hog\nfrom skimage import data, exposure\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom skimage import color\nfrom skimage.transform import resize\nimport math\nfrom skimage.feature import hog\nimport numpy as np",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#collect-hog-features-for-backflip-image",
    "href": "backflip_image_results.html#collect-hog-features-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Collect HOG Features for Backflip Image",
    "text": "Collect HOG Features for Backflip Image\n\n\nCode\n# List for storing images\nimg_list = []\n\n# SF aerial\nimg_list.append(color.rgb2gray(io.imread(\"images/TitusFlip.jpg\")))\n\n# List to store magnitudes for each image\nmag_list = []\n\n# List to store angles for each image\ntheta_list = []\n\n\nfor x in range(len(img_list)):\n    # Get image of interest\n    img = img_list[x]\n\n    rescaled_file_path = f\"images/plots/backflip/{x}.jpg\"\n\n    # Determine aspect Ratio\n    aspect_ratio = img.shape[0] / img.shape[1]\n    print(\"Aspect Ratio:\", aspect_ratio)\n\n    # Hard-Code height to 200 pixels\n    height = 200\n\n    # Calculate witdth to maintain same aspect ratio\n    width = int(height / aspect_ratio)\n    print(\"Resized Width:\", width)\n\n    # Resize the image\n    resized_img = resize(img, (height, width))\n\n    # Replace the original image with the resized image\n    img_list[x] = resized_img\n\n    # plt.figure(figsize=(15, 8))\n    # plt.imshow(resized_img, cmap=\"gray\")\n    # plt.axis(\"on\")\n    # plt.tight_layout()\n    # plt.savefig(rescaled_file_path, dpi=300)\n    # plt.show()\n\n    # list for storing all magnitudes for image[x]\n    mag = []\n\n    # list for storing all angles for image[x]\n    theta = []\n\n    for i in range(height):\n        magnitudeArray = []\n        angleArray = []\n\n        for j in range(width):\n            if j - 1 &lt; 0 or j + 1 &gt;= width:\n                if j - 1 &lt; 0:\n                    Gx = resized_img[i][j + 1] - 0\n                elif j + 1 &gt;= width:\n                    Gx = 0 - resized_img[i][j - 1]\n            else:\n                Gx = resized_img[i][j + 1] - resized_img[i][j - 1]\n\n            if i - 1 &lt; 0 or i + 1 &gt;= height:\n                if i - 1 &lt; 0:\n                    Gy = 0 - resized_img[i + 1][j]\n                elif i + 1 &gt;= height:\n                    Gy = resized_img[i - 1][j] - 0\n            else:\n                Gy = resized_img[i + 1][j] - resized_img[i - 1][j]\n\n            magnitude = math.sqrt(pow(Gx, 2) + pow(Gy, 2))\n            magnitudeArray.append(round(magnitude, 9))\n\n            if Gx == 0:\n                angle = math.degrees(0.0)\n            else:\n                angle = math.degrees(math.atan(Gy / Gx))\n                if angle &lt; 0:\n                    angle += 180\n\n            angleArray.append(round(angle, 9))\n\n        mag.append(magnitudeArray)\n        theta.append(angleArray)\n\n    # add list of magnitudes to list[x]\n    mag_list.append(mag)\n\n    # add list of angles to angle list[x]\n    theta_list.append(theta)\n\n\nAspect Ratio: 1.25\nResized Width: 160\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip\n\n\n\n\n\n\nFigure 6.2: Skiing Backflip Image Re-scaled and Converted to Grayscale",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#extract-gradient-magnitudes-and-angles-from-backflip-image",
    "href": "backflip_image_results.html#extract-gradient-magnitudes-and-angles-from-backflip-image",
    "title": "6  Backflip Image",
    "section": "Extract Gradient Magnitudes and Angles from Backflip Image",
    "text": "Extract Gradient Magnitudes and Angles from Backflip Image\n\n\nCode\n# DF of gradient magnitudes and angles\nmag_flip = np.array(mag_list[0])\ntheta_flip = np.array(theta_list[0])",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#plot-gradient-magnitudes-as-image-for-backflip-image",
    "href": "backflip_image_results.html#plot-gradient-magnitudes-as-image-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Plot Gradient Magnitudes as Image for Backflip Image",
    "text": "Plot Gradient Magnitudes as Image for Backflip Image\n\n\nCode\n# Save gradient magnitudes of backflip in image form\n\n# plt.figure(figsize=(15, 8))\n# #plt.title('San Francisco, CA Gradient Magnitudes')\n# plt.imshow(mag_list[0], cmap=\"gray\")\n# plt.axis(\"on\")\n# #plt.show()\n# plt.tight_layout()\n# plt.savefig(\"images/plots/backflip/backflip_mag.png\", dpi=300)\n\n\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip Image\n\n\n\n\n\n\nFigure 6.3: Skiing Backflip Cityscape Magnitudes as Image",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#create-data-frame-for-backflip-image",
    "href": "backflip_image_results.html#create-data-frame-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Create Data Frame for Backflip Image",
    "text": "Create Data Frame for Backflip Image\n\n\nMake Data Frame for backflip image magnitudes and angles and store it in a list\n# Flip DF\nbackflip_hog_df &lt;- data.frame(mag = as.vector(py$mag_flip),\n                              theta = as.vector((py$theta_flip))) %&gt;%\n  mutate(radian = theta*(pi/180))\n\n# Add to list\nflip_standard_df_list = list(backflip_hog_df)",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-backflip-image",
    "href": "backflip_image_results.html#create-histograms-of-gradient-magnitudes-and-angles-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Create Histograms of Gradient Magnitudes and Angles for Backflip Image",
    "text": "Create Histograms of Gradient Magnitudes and Angles for Backflip Image\n\n\nPlot histogram of backflip image gradient magnitudes and define the magnitude level for later filtering\n# backflip histogram of gradient mags\nflip_histogram_mag_plot &lt;-\n  ggplot(flip_standard_df_list[[1]],\n         aes(x = mag)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() +\n  labs(x = \"Gradient Magnitude\",\n       y = \"Count\",\n       title = \"Skiing Backflip Image Histogram of Gradient Magnitudes\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# flip magn filter level\nflip_mag_filter &lt;- 0.2\n\n# save image\nggsave(\"images/plots/backflip/backflip_histogram_mag_plot.jpg\", \n       flip_histogram_mag_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\nPlot histogram of backflip image gradient angles\n# backflip histogram of gradient angles\nflip_histogram_theta_plot &lt;-\n  ggplot(flip_standard_df_list[[1]],\n         aes(x = theta)) +\n  geom_histogram(colour = \"black\", fill = \"lightblue\") +\n  scale_x_continuous() +\n  labs(x = \"Gradient Angle\",\n       y = \"Count\",\n       title = \"Skiing Backflip Image Histogram of Gradient Angles\"\n       ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/backflip/backflip_histogram_theta_plot.jpg\", \n       flip_histogram_theta_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\nHistogram of Gradient Magnitudes\n\n\n\n\n\n\n\nHistogram of Gradient Angles\n\n\n\n\n\n\nFigure 6.4: Skiing Backflip Magnitudes and Angles",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#build-new-distributed-histogram-data-frame-for-backflip-image",
    "href": "backflip_image_results.html#build-new-distributed-histogram-data-frame-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Build New Distributed Histogram Data Frame for Backflip Image",
    "text": "Build New Distributed Histogram Data Frame for Backflip Image\n\n\nFunction for calculating values for each bin of distributed histogram\n# function to calculate the contributions to neighboring bins\ncalculate_bin_contributions &lt;- function(angle, magnitude, num_bins) {\n  bin_width &lt;- 180 / num_bins\n  contributions &lt;- numeric(num_bins)\n  \n  # get the central bin\n  central_bin &lt;- floor(angle / bin_width) %% num_bins\n  next_bin &lt;- (central_bin + 1) %% num_bins\n  \n  # get contributions to neighboring bins\n  weight &lt;- (1 - abs((angle %% bin_width) / bin_width)) * magnitude\n  \n  contributions[central_bin + 1] &lt;- weight\n  contributions[next_bin + 1] &lt;- magnitude - weight\n  \n  return(list(contributions[1],\n         contributions[2],\n         contributions[3],\n         contributions[4],\n         contributions[5],\n         contributions[6],\n         contributions[7],\n         contributions[8],\n         contributions[9])\n         )\n}\n\n\n\n\nFilter data frame of gradients and angles to only contain observations with magnitudes greater than or equal to the respective magnitude levels determined above\n# Create filtered data frames using the filter level \n# for magnitudes defined above, store in a list\nfiltered_flip_standard_df_list &lt;-\n  list(backflip_hog_df %&gt;%\n         filter(mag &gt;= flip_mag_filter))\n\n\n\n\nCalculate the contribution to each bin for the distribued histogram\n# Define the number of bins\nnum_bins &lt;- 9\nflip_contribution_df_list &lt;- list()\n\n# iterate through each filtered standard data frame (only 1 in this case)\nfor (i in 1:length(filtered_flip_standard_df_list)){\n\n  flip_contribution_hog_df &lt;-\n    filtered_flip_standard_df_list[[i]] %&gt;%\n    rowwise() %&gt;%\n    mutate(`0` = calculate_bin_contributions(theta, mag, 9)[[1]],\n           `20` = calculate_bin_contributions(theta, mag, 9)[[2]],\n           `40` = calculate_bin_contributions(theta, mag, 9)[[3]],\n           `60` = calculate_bin_contributions(theta, mag, 9)[[4]],\n           `80` = calculate_bin_contributions(theta, mag, 9)[[5]],\n           `100` = calculate_bin_contributions(theta, mag, 9)[[6]],\n           `120` = calculate_bin_contributions(theta, mag, 9)[[7]],\n           `140` = calculate_bin_contributions(theta, mag, 9)[[8]],\n           `160` = calculate_bin_contributions(theta, mag, 9)[[9]],\n           )\n  \n  # rearrange into same tidy format\n  flip_split_histo_df &lt;-\n    flip_contribution_hog_df %&gt;%\n    pivot_longer(names_to = \"bin\",\n                 values_to = \"contribution\",\n                 cols = 4:ncol(flip_contribution_hog_df)) %&gt;%\n    mutate(bin = as.numeric(bin)) %&gt;%\n    group_by(bin) %&gt;%\n    summarise(contribution_sum = sum(contribution))\n\n  # add to list for storage\n  flip_contribution_df_list[[i]] &lt;- flip_split_histo_df\n\n}",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#generate-polar-plots-for-standard-histograms-for-backflip-image",
    "href": "backflip_image_results.html#generate-polar-plots-for-standard-histograms-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Generate Polar Plots for Standard Histograms for Backflip Image",
    "text": "Generate Polar Plots for Standard Histograms for Backflip Image\n\n\nPolar plot of backflip image histogram of gradient angles using standard binning technique\n# backflip plot\nflip_plot &lt;-\n  ggplot(filtered_flip_standard_df_list[[1]],\n         aes(x = theta)) +\n  geom_histogram(colour = \"black\",\n                 fill = \"lightblue\",\n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\",\n    start = 0,\n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315),\n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Skiing Backflip\n       Image Using Standard HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/backflip/backflip_standard_polar_plot.jpg\", \n       flip_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#generate-polar-plots-for-distributed-histograms-for-backflip-image",
    "href": "backflip_image_results.html#generate-polar-plots-for-distributed-histograms-for-backflip-image",
    "title": "6  Backflip Image",
    "section": "Generate Polar Plots for Distributed Histograms for Backflip Image",
    "text": "Generate Polar Plots for Distributed Histograms for Backflip Image\n\n\nPolar plot of backflip image histogram of gradient angles using distributed binning technique\n# backflip plot\nflip_split_plot &lt;-\n  ggplot(flip_contribution_df_list[[1]],\n         aes(x = bin, y = contribution_sum)) +\n  geom_histogram(stat = \"identity\",\n                 colour = \"black\",\n                 fill = \"lightblue\",\n                 breaks = seq(0, 360, length.out = 17.5),\n                 bins = 9) +\n  coord_polar(\n    theta = \"x\",\n    start = 0,\n    direction = 1) +\n  scale_x_continuous(limits = c(0,360),\n    breaks = c(0, 45, 90, 135, 180, 225, 270, 315),\n    labels = c(\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\")\n  )+\n  labs(title = \"Polar Plot of Skiing Backflip Image\n       Using Distributed HOG Technique\") +\n  theme_minimal() +\n  labs(x = \"\") +\n  theme(axis.title.y = element_blank(),\n        plot.title = element_text(hjust = 0.5))\n\n# save image\nggsave(\"images/plots/backflip/backflip_contribution_polar_plot.jpg\", \n       flip_split_plot, \n       width = 6, \n       height = 4, \n       dpi = 300)\n\n\n\n\n\n\n\n\n\n\n\n\nPolar Plot Using Standard HOG Technique\n\n\n\n\n\n\n\nPolar Plot Using Distributed HOG Technique\n\n\n\n\n\n\nFigure 6.5: Polar Plots using Standard and Distributed Binning Technique for Skiing Backflip Image",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "backflip_image_results.html#discussion",
    "href": "backflip_image_results.html#discussion",
    "title": "6  Backflip Image",
    "section": "Discussion",
    "text": "Discussion\n      When looking at the gradient magnitudes in image form the most definitive lines occur where the snow from the jump is visible. This makes sense, because the snowy jump is a uniform white, resulting in minimal gradient magnitudes from one pixel to the next within this area. When the edge of the snow meets the crowd in the background, there is a great increase in gradient magnitude. Since the snowy jump in this image is mostly horizontal with some incline and decline, both polar plots identify the horizontal angle as being the most frequent. Interestingly, the distributed binning technique has a notably smaller frequency of vertical lines, likely due to the greater influence of magnitudes on their contribution to the histogram.\n\n\n\n\n\n\n\n\n\n\nSkiing Backflip Image\nSkiing Backflip\nSkiing Backflip Image\nHistogram of Gradient Magnitudes\nHistogram of Gradient Angles\nPolar Plot Using Standard HOG Technique\nPolar Plot Using Distributed HOG Technique",
    "crumbs": [
      "Results",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Backflip Image</span>"
    ]
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "7  Conclusion",
    "section": "",
    "text": "In this study, the Histogram of Oriented Gradients (HOG) algorithm was utilized to analyze a variety of images, including those sourced from both the internet and St. Lawrence University. Our objective was to extract dominant angles from these images and assess the algorithm’s potential for automating the manual grass lay measurement technique performed by Dr. Rosales and his team. Their research focuses on correlating grass lay direction with predominant wind data, locally at St. Lawrence University, to evaluate potential shifts in prevailing Arctic wind patterns observed by indigenous communities. The HOG algorithm was successful in identifying patterns, streets, edges, and grass lay angles from various images. Images with visually dominant angles were evaluated accurately by the algorithm. Even in scenarios where images introduced increased variability, such as the aerial Living Laboratory and skiing image, visual patterns were reflected by the polar histograms.\n      While the HOG algorithm proved effective, it does come with limitations. Although it can identify the axis of a gradient’s angle, it lacks the capability to determine the direction of a gradient’s angle. This occurs because the inverse tangent function used to calculate a gradient’s angle using the x-gradient and y-gradient components can only produce angles between 0 and 180 degrees. This poses potential challenges when counting angle frequencies, as any angle with a directional component surpassing 180 degrees gets conflated with its corresponding angle below 180 degrees. In order to achieve optimal results, it is best to use images with relatively square aspect ratios, higher zoom levels, and consistent lighting. As seen in the Salt Lake City image, having a predominantly rectangular aspect ratio can accentuate the frequency of angles in a certain direction because they naturally have a higher occurrence. Zoom level played a critical role when analyzing the aerial cityscapes, as San Francisco emerged having the most accurate results with its slightly diagonal grid layout. Lastly, the skiing image highlighted the impact of object brightness on polar plots. Specifically for the distributed binning technique, images featuring brighter objects tended have higher frequencies of corresponding gradient angles because of their increased gradient magnitudes.\n      In conclusion, our findings visualize the efficacy of the HOG algorithm in extracting gradient angles from various images, particularly lay angles from grass images. To further validate the results from this study, the next step entails a comparison between the results generated by the HOG algorithm’s polar plots and the manually measured angles by Dr. Rosales’ team. Additionally, future comparison of aerial grass images with corresponding wind data is necessary to apply this methodology on St. Lawrence Island, AK to facilitate more efficient data collection and analysis.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Conclusion</span>"
    ]
  }
]